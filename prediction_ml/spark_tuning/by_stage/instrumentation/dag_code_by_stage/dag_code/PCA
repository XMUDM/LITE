{"0": "         val pca = new PCA(dimensions).fit(data.map(_.features))\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n", "1": "         val pca = new PCA(dimensions).fit(data.map(_.features))\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n", "2": "     val summary = rows.treeAggregate(new MultivariateOnlineSummarizer)(\n         val pca = new PCA(dimensions).fit(data.map(_.features))\n     val summary = rows.treeAggregate(new MultivariateOnlineSummarizer)(\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n", "3": "     val summary = rows.treeAggregate(new MultivariateOnlineSummarizer)(\n     val summary = rows.treeAggregate(new MultivariateOnlineSummarizer)(\n", "4": "     val GU = rows.treeAggregate(null.asInstanceOf[BDV[Double]])(\n     val GU = rows.treeAggregate(null.asInstanceOf[BDV[Double]])(\n         val pca = new PCA(dimensions).fit(data.map(_.features))\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n", "5": "     val GU = rows.treeAggregate(null.asInstanceOf[BDV[Double]])(\n     val GU = rows.treeAggregate(null.asInstanceOf[BDV[Double]])(\n", "6": "         val training_pca = data.map(p => p.copy(features = pca.transform(p.features)))\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n     sc.textFile(path, minPartitions).map(LabeledPoint.parse)\n"}