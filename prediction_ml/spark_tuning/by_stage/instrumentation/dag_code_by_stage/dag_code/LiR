{"0": "       numFeatures = input.map(_.features.size).first()\n         JavaRDD<String> data = sc.textFile(input);\n         JavaRDD<LabeledPoint> parsedData = data.map(\n         JavaRDD<String> data = sc.textFile(input);\n", "1": "           input.map(lp => (lp.label, lp.features))\n         JavaRDD<String> data = sc.textFile(input);\n         JavaRDD<LabeledPoint> parsedData = data.map(\n         JavaRDD<String> data = sc.textFile(input);\n", "2": "         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n         JavaRDD<String> data = sc.textFile(input);\n         JavaRDD<LabeledPoint> parsedData = data.map(\n           input.map(lp => (lp.label, lp.features))\n       val (gradientSum, lossSum, miniBatchSize) = data.sample(false, miniBatchFraction, 42 + i)\n         JavaRDD<String> data = sc.textFile(input);\n", "3": "         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n", "4": "         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n         JavaRDD<String> data = sc.textFile(input);\n       val (gradientSum, lossSum, miniBatchSize) = data.sample(false, miniBatchFraction, 42 + i)\n         JavaRDD<LabeledPoint> parsedData = data.map(\n           input.map(lp => (lp.label, lp.features))\n         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n         JavaRDD<String> data = sc.textFile(input);\n", "5": "         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n", "6": "         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n         JavaRDD<String> data = sc.textFile(input);\n       val (gradientSum, lossSum, miniBatchSize) = data.sample(false, miniBatchFraction, 42 + i)\n         JavaRDD<LabeledPoint> parsedData = data.map(\n           input.map(lp => (lp.label, lp.features))\n         JavaRDD<String> data = sc.textFile(input);\n", "7": "         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n         .treeAggregate((BDV.zeros[Double](n), 0.0, 0L))(\n", "8": "         ).rdd()).mean();\n         JavaRDD<String> data = sc.textFile(input);\n         Double MSE = new JavaDoubleRDD(valuesAndPreds.map(\n         JavaRDD<LabeledPoint> parsedData = data.map(\n         JavaRDD<Tuple2<Double, Double>> valuesAndPreds = parsedData.map(\n         JavaRDD<String> data = sc.textFile(input);\n"}