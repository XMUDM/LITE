  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
      map.changeValue(vid, defaultVal, identity)
<SEP>
  protected var grow = (newCapacity: Int) => {
<SEP>
      (vertexIter, routingTableIter) =>
<SEP>
    partitionsRDD.mapPartitions(_.flatMap(_.shipVertexAttributes(shipSrc, shipDst)))
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
private[graphx]
<SEP>
    new RoutingTablePartition(pid2vid.zipWithIndex.map {
<SEP>
      map.setMerge(pair._1, pair._2, mergeFunc)
<SEP>
    iter.foreach { pair =>
<SEP>
    val recordsRead: Long)
<SEP>
    var f: (Iterator[A], Iterator[B]) => Iterator[V],
<SEP>
          _ ++ _, TripletFields.None)
<SEP>
    partitionsRDD.mapPartitions(_.flatMap(_.shipVertexAttributes(shipSrc, shipDst)))
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val attemptId: Int,
<SEP>
    partitionValues = rdds.map(rdd => rdd.partitions(idx))
     oos.defaultWriteObject()
<SEP>
    val newPartitionsRDD = partitionsRDD.mapPartitions(_.map(f), preservesPartitioning = true)
<SEP>
  (implicit override protected val vdTag: ClassTag[VD])
<SEP>
  implicit object ShippableVertexPartitionOpsConstructor
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
    val parts = partitionsRDD.zipPartitions(shuffled, true) { (thisIter, msgIter) =>
<SEP>
private[graphx] class ShippableVertexPartitionOps[VD: ClassTag](self: ShippableVertexPartition[VD])
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
    checkpointData.exists(_.isCheckpointed)
<SEP>
    val partitions = s.asInstanceOf[ZippedPartitionsPartition].partitions
     f(rdd1.iterator(partitions(0), context), rdd2.iterator(partitions(1), context))
<SEP>
  val capacity: Int = index.capacity
<SEP>
    @transient private val rdds: Seq[RDD[_]],
<SEP>
    val recordsWritten: Long)
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
    Iterator.tabulate(routingTable.numEdgePartitions) { pid =>
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    val executorCpuTime: Long,
<SEP>

<SEP>
    iter.foreach { product =>
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
    Iterator.tabulate(routingTable.numEdgePartitions) { pid =>
<SEP>
    val bytesRead: Long,
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    val hostPort: String,
<SEP>
    val blockId = RDDBlockId(id, partition.index)
     var readCachedBlock = true
     // This method is called on executors, so we need call SparkEnv.get instead of sc.env.
     SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
    routingTable.iterator.foreach { vid =>
<SEP>
      val thisPart = thisIter.next()
       val otherPart = otherIter.next()
       Iterator(thisPart.leftJoin(otherPart)(f))
<SEP>
    s.asInstanceOf[ZippedPartitionsPartition].preferredLocations
<SEP>
    val bytesWritten: Long,
<SEP>
      graph.collectNeighborIds(EdgeDirection.Either).mapValues { (vid, nbrs) =>
<SEP>
<SEP>
    dependencies.head.rdd.asInstanceOf[RDD[U]]
<SEP>
<SEP>
    val name: String,
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
    firstParent[ShippableVertexPartition[VD]].iterator(part, context).next().iterator
<SEP>
  @transient var name: String = _
<SEP>
    val routingTable: RoutingTablePartition)
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    if (isCheckpointedAndMaterialized) {
<SEP>
    var rdd2: RDD[B],
<SEP>
  def iterator: Iterator[VertexId] = routingTable.iterator.flatMap(_._1.iterator)
<SEP>
    val executors: Seq[String])
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
  def iterator: Iterator[VertexId] = routingTable.iterator.flatMap(_._1.iterator)
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
    mask.iterator.map(ind => (index.getValue(ind), values(ind)))
<SEP>
    if (self.index != other.index) {
<SEP>
        val set = new VertexSet(nbrs.length)
         var i = 0
         while (i < nbrs.length) {
           // prevent self cycle
           if (nbrs(i) != vid) {
             set.add(nbrs(i))
           }
           i += 1
         }
         set
<SEP>
  override def getStorageLevel: StorageLevel = partitionsRDD.getStorageLevel
<SEP>
    for (msg <- iter) {
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val keySet: OpenHashSet[K], var _values: Array[V])
<SEP>
  def partitionSize(pid: PartitionID): Int = routingTable(pid)._1.length
<SEP>
    val resultSerializationTime: Long,
<SEP>
   * `ShippableVertexPartition`.
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
    val keySet: OpenHashSet[K], var _values: Array[V])
<SEP>
    val map = new GraphXPrimitiveKeyOpenHashMap[VertexId, VD]
     // Merge the given vertices using mergeFunc
     iter.foreach { pair =>
       map.setMerge(pair._1, pair._2, mergeFunc)
     }
     // Fill in missing vertices mentioned in the routing table
     routingTable.iterator.foreach { vid =>
       map.changeValue(vid, defaultVal, identity)
     }
 
     new ShippableVertexPartition(map.keySet, map._values, map.keySet.getBitSet, routingTable)
<SEP>
  def sparkContext: SparkContext = sc
<SEP>
    this.mapVertexPartitions(_.map(f))
<SEP>
  def initialize(): Unit = inputBlock.get()
<SEP>
  def apply(vid: VertexId): VD = values(index.getPos(vid))
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
      thisIter.map(_.aggregateUsingIndex(msgIter, reduceFunc))
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
    val executorDeserializeTime: Long,
<SEP>
  var partitionValues = rdds.map(rdd => rdd.partitions(idx))
<SEP>

   /**
    * Implicit evidence that `ShippableVertexPartition` is a member of the
    * `VertexPartitionBaseOpsConstructor` typeclass. This enables invoking `VertexPartitionBase`
    * operations on a `ShippableVertexPartition` via an evidence parameter, as in
    * [[VertexPartitionBaseOps]].
    */
   implicit object ShippableVertexPartitionOpsConstructor
     extends VertexPartitionBaseOpsConstructor[ShippableVertexPartition] {
     def toOps[VD: ClassTag](partition: ShippableVertexPartition[VD])
<SEP>
    val mask: BitSet,
<SEP>
      val initialSize = if (shipSrc && shipDst) routingTable.partitionSize(pid) else 64
       val vids = new PrimitiveVector[VertexId](initialSize)
       val attrs = new PrimitiveVector[VD](initialSize)
       var i = 0
       routingTable.foreachWithinEdgePartition(pid, shipSrc, shipDst) { vid =>
         if (isDefined(vid)) {
           vids += vid
           attrs += this(vid)
         }
         i += 1
       }
       (pid, new VertexAttributeBlock(vids.trim().array, attrs.trim().array))
<SEP>
    val newMask = new BitSet(self.capacity)
     // Iterate over the active bits in the old mask and evaluate the predicate
     var i = self.mask.nextSetBit(0)
     while (i >= 0) {
       if (pred(self.index.getValue(i), self.values(i))) {
         newMask.set(i)
       }
       i = self.mask.nextSetBit(i + 1)
     }
     this.withMask(newMask)
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String,
<SEP>
    SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
    val newMask = new BitSet(self.capacity)
     val newValues = new Array[VD2](self.capacity)
     iter.foreach { product =>
       val vid = product._1
       val vdata = product._2
       val pos = self.index.getPos(vid)
       if (pos >= 0) {
         if (newMask.get(pos)) {
           newValues(pos) = reduceFunc(newValues(pos), vdata)
         } else { // otherwise just store the new value
           newMask.set(pos)
           newValues(pos) = vdata
         }
       }
     }
     this.withValues(newValues).withMask(newMask)
<SEP>
    val id: Int,
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
    val bytesWritten: Long,
<SEP>
    val pos = keySet.addWithoutResize(k)
     val ind = pos & OpenHashSet.POSITION_MASK
     if ((pos & OpenHashSet.NONEXISTENCE_MASK) != 0) { // if first add
       _values(ind) = v
     } else {
       _values(ind) = mergeF(_values(ind), v)
     }
     keySet.rehashIfNeeded(k, grow, move)
     _oldValues = null
<SEP>
  }
<SEP>
    @transient val partitionsRDD: RDD[ShippableVertexPartition[VD]],
<SEP>
    val resultSize: Long,
<SEP>
    var rdd1: RDD[A],
<SEP>
      iter => Iterator(RoutingTablePartition.fromMsgs(numEdgePartitions, iter)),
<SEP>
<SEP>
  override val index: Int = idx
<SEP>
    val localBlocksFetched: Long,
<SEP>
  private def positionFromMessage(msg: RoutingTableMessage): Byte = (msg._2 >> 30).toByte
<SEP>
    val keySet: OpenHashSet[K], var _values: Array[V])
<SEP>
      vpred: (VertexId, VD) => Boolean = (a, b) => true): Graph[VD, ED] = {
<SEP>
    ) { (thisIter, otherIter) =>
<SEP>
  val id: Int = sc.newRddId()
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
    val writeTime: Long,
<SEP>
    val peakExecutionMemory: Long,
<SEP>
      routingTable.foreachWithinEdgePartition(pid, shipSrc, shipDst) { vid =>
<SEP>
    val pid2vid = Array.fill(numEdgePartitions)(new PrimitiveVector[VertexId])
     val srcFlags = Array.fill(numEdgePartitions)(new PrimitiveVector[Boolean])
     val dstFlags = Array.fill(numEdgePartitions)(new PrimitiveVector[Boolean])
     for (msg <- iter) {
       val vid = vidFromMessage(msg)
       val pid = pidFromMessage(msg)
       val position = positionFromMessage(msg)
       pid2vid(pid) += vid
       srcFlags(pid) += (position & 0x1) != 0
       dstFlags(pid) += (position & 0x2) != 0
     }
 
     new RoutingTablePartition(pid2vid.zipWithIndex.map {
<SEP>
    val stageId: Int,
<SEP>
private[graphx] class ShippableVertexPartitionOps[VD: ClassTag](self: ShippableVertexPartition[VD])
<SEP>
      val vid = vidFromMessage(msg)
       val pid = pidFromMessage(msg)
       val position = positionFromMessage(msg)
       pid2vid(pid) += vid
       srcFlags(pid) += (position & 0x1) != 0
       dstFlags(pid) += (position & 0x2) != 0
<SEP>
  private[spark] def elementClassTag: ClassTag[T] = classTag[T]
<SEP>
private[graphx] abstract class VertexPartitionBaseOps
<SEP>
    val recordsRead: Long)
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
  var partitionValues = rdds.map(rdd => rdd.partitions(idx))
<SEP>
      : VertexPartitionBaseOps[VD, ShippableVertexPartition] = shippablePartitionToOps(partition)
<SEP>
<SEP>
      getPreferredLocations(split)
<SEP>
    val index: VertexIdToIndexMap,
<SEP>
  protected var move = (oldPos: Int, newPos: Int) => {
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
    mask.iterator.map(ind => (index.getValue(ind), values(ind)))
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
    val parts = partitionsRDD.zipPartitions(shuffled, true) { (thisIter, msgIter) =>
<SEP>
    partitionValues = rdds.map(rdd => rdd.partitions(idx))
<SEP>
    @transient val preferredLocations: Seq[String])
<SEP>
    s.asInstanceOf[ZippedPartitionsPartition].preferredLocations
<SEP>
          if (routingTableIter.hasNext) routingTableIter.next() else RoutingTablePartition.empty
         Iterator(ShippableVertexPartition(vertexIter, routingTable, defaultVal, mergeFunc))
<SEP>
    if (storageLevel != StorageLevel.NONE) {
<SEP>
  def partitions: Seq[Partition] = partitionValues
<SEP>
    Iterator.tabulate(routingTable.numEdgePartitions) { pid =>
<SEP>
      nbrsOpt.getOrElse(Array.empty[VertexId])
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
    val bitset = new BitSet(flags.size)
     var i = 0
     while (i < flags.size) {
       if (flags(i)) {
         bitset.set(i)
       }
       i += 1
     }
     bitset
<SEP>
    val newVerts = vertices.mapVertexPartitions(_.filter(vpred))
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val remoteBytesRead: Long,
<SEP>
  val numEdgePartitions: Int = routingTable.length
<SEP>
  def unset(): Unit = inputBlock.remove()
<SEP>
    val executorRunTime: Long,
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
  override val index: Int = idx
<SEP>
  override def cache(): this.type = {
<SEP>
    val (vidsCandidate, srcVids, dstVids) = routingTable(pid)
<SEP>
    val diskUsed: Long,
<SEP>
  private def pidFromMessage(msg: RoutingTableMessage): PartitionID = msg._2 & 0x3FFFFFFF
<SEP>
      (vid, _, optSet) => optSet.getOrElse(null)
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    // Merge the given vertices using mergeFunc
     iter.foreach { pair =>
       map.setMerge(pair._1, pair._2, mergeFunc)
     }
     // Fill in missing vertices mentioned in the routing table
     routingTable.iterator.foreach { vid =>
       map.changeValue(vid, defaultVal, identity)
<SEP>
    val fetchWaitTime: Long,
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
      (context: TaskContext, index: Int, iter: Iterator[T]) => cleanedF(iter),
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    val memoryUsed: Long,
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
    val recordsWritten: Long)
<SEP>
    val diskBytesSpilled: Long,
<SEP>
      map.changeValue(vid, defaultVal, identity)
<SEP>
  private def vidFromMessage(msg: RoutingTableMessage): VertexId = msg._1
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
      thisIter.map(_.aggregateUsingIndex(msgIter, reduceFunc))
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    new InheritableThreadLocal[AtomicReference[FileBlock]] {
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    val localBytesRead: Long,
<SEP>
    f(context, split.index, firstParent[T].iterator(split, context))
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
    graph.vertices.leftZipJoin(nbrs) { (vid, vdata, nbrsOpt) =>
<SEP>
        if (isDefined(vid)) {
           vids += vid
           attrs += this(vid)
         }
         i += 1
<SEP>
  private var _oldValues: Array[V] = null
<SEP>
   * operations on a `ShippableVertexPartition` via an evidence parameter, as in
<SEP>
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
              existingMetrics.incRecordsRead(1)
               delegate.next()
<SEP>
    val jobId: Int,
<SEP>
    val jvmGcTime: Long,
<SEP>
    : ShippableVertexPartitionOps[VD] = new ShippableVertexPartitionOps(partition)
<SEP>
    val pid2vid = Array.fill(numEdgePartitions)(new PrimitiveVector[VertexId])
<SEP>
    val dstFlags = Array.fill(numEdgePartitions)(new PrimitiveVector[Boolean])
<SEP>
    val newValues = new Array[VD2](self.capacity)
     var i = self.mask.nextSetBit(0)
     while (i >= 0) {
       newValues(i) = f(self.index.getValue(i), self.values(i))
       i = self.mask.nextSetBit(i + 1)
     }
     this.withValues(newValues)
<SEP>
    val srcFlags = Array.fill(numEdgePartitions)(new PrimitiveVector[Boolean])
<SEP>
    val dep = dependencies.head.asInstanceOf[ShuffleDependency[K, V, C]]
     SparkEnv.get.shuffleManager.getReader(dep.shuffleHandle, split.index, split.index + 1, context)
       .read()
<SEP>
    val values: Array[VD],
<SEP>
