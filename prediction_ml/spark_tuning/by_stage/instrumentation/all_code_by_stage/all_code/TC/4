    val bytesWritten: Long,
<SEP>
      val tmp = data(pos0)
       data(pos0) = data(pos1)
       data(pos1) = tmp
<SEP>
    val resultSize: Long,
<SEP>
  var parents: Seq[Partition] = parentsIndices.map(rdd.partitions(_))
<SEP>
    @transient val partitionsRDD: RDD[ShippableVertexPartition[VD]],
<SEP>
  private var _oldValues: Array[V] = null
<SEP>
      System.arraycopy(src, srcPos, dst, dstPos, length)
<SEP>
  protected var grow = (newCapacity: Int) => {
<SEP>
<SEP>
  def iterator: Iterator[Edge[ED]] = new Iterator[Edge[ED]] {
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    val localBlocksFetched: Long,
<SEP>
    val keySet: OpenHashSet[K], var _values: Array[V])
<SEP>
    var srcId: VertexId = 0,
<SEP>
    map.iterator.map { vidAndPosition =>
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
  val id: Int = sc.newRddId()
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
    val recordsRead: Long)
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
          { currLocalId += 1; local2global += srcId; currLocalId }, identity)
<SEP>
    val writeTime: Long,
<SEP>
      if (a.srcId == b.srcId) {
<SEP>
    val peakExecutionMemory: Long,
<SEP>
    parents = parentsIndices.map(rdd.partitions(_))
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val attemptId: Int,
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
        { (pid: Int, iter: Iterator[(PartitionID, (VertexId, VertexId, ED))]) =>
<SEP>
    val vid2pid = edges.partitionsRDD.mapPartitions(_.flatMap(
<SEP>
    val stageId: Int,
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
  private[spark] def elementClassTag: ClassTag[T] = classTag[T]
<SEP>
    var attr: ED = null.asInstanceOf[ED])
<SEP>
    edges += Edge(src, dst, d)
<SEP>
    def hasNext: Boolean = nextPair != null
<SEP>
      data(pos)
<SEP>
  override def iterator: Iterator[(K, V)] = new Iterator[(K, V)] {
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
    checkpointData.exists(_.isCheckpointed)
<SEP>
    val keySet: OpenHashSet[K], var _values: Array[V])
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
    val recordsRead: Long)
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
    val recordsWritten: Long)
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
  private[graphx] def lexicographicOrdering[ED] = new Ordering[Edge[ED]] {
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
    parents = parentsIndices.map(rdd.partitions(_))
     oos.defaultWriteObject()
<SEP>
      getPreferredLocations(split)
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    val executorCpuTime: Long,
<SEP>
  protected var move = (oldPos: Int, newPos: Int) => {
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
  def iterator: Iterator[Edge[ED]] = new Iterator[Edge[ED]] {
<SEP>
  @inline private def dstIds(pos: Int): VertexId = local2global(localDstIds(pos))
<SEP>
          iter.foreach { message =>
<SEP>
    val bytesRead: Long,
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    @transient val preferredLocations: Seq[String])
<SEP>
    val hostPort: String,
<SEP>
    s.asInstanceOf[ZippedPartitionsPartition].preferredLocations
<SEP>
  private[graphx] def lexicographicOrdering[ED] = new Ordering[Edge[ED]] {
<SEP>
      Function.tupled(RoutingTablePartition.edgePartitionToMsgs)))
<SEP>
    val blockId = RDDBlockId(id, partition.index)
     var readCachedBlock = true
     // This method is called on executors, so we need call SparkEnv.get instead of sc.env.
     SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
    var srcId: VertexId = 0,
<SEP>
    if (storageLevel != StorageLevel.NONE) {
<SEP>
    s.asInstanceOf[ZippedPartitionsPartition].preferredLocations
<SEP>
    val bytesWritten: Long,
<SEP>
  override def iterator: Iterator[(K, V)] = new Iterator[(K, V)] {
<SEP>
    size: Int = 64) {
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
    parentsIndices: Array[Int],
<SEP>
    dependencies.head.rdd.asInstanceOf[RDD[U]]
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
          val builder = new EdgePartitionBuilder[ED, VD]()(edTag, vdTag)
           iter.foreach { message =>
             val data = message._2
             builder.add(data._1, data._2, data._3)
           }
           val edgePartition = builder.toEdgePartition
           Iterator((pid, edgePartition))
<SEP>
    val positionUpper2 = position << 30
     val pidLower30 = pid & 0x3FFFFFFF
     (vid, positionUpper2 | pidLower30)
<SEP>
      val vid = vidAndPosition._1
       val position = vidAndPosition._2
       toMessage(vid, pid, position)
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val remoteBytesRead: Long,
<SEP>
  def unset(): Unit = inputBlock.remove()
<SEP>
    val name: String,
<SEP>
    val executorRunTime: Long,
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
    @transient rdd: RDD[_],
<SEP>
  @transient var name: String = _
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
  override val index: Int = idx
<SEP>
      (context: TaskContext, index: Int, iter: Iterator[T]) => cleanedF(index, iter),
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    if (isCheckpointedAndMaterialized) {
<SEP>
    val executors: Seq[String])
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
    val diskUsed: Long,
<SEP>
      map.changeValue(e.srcId, 0x1, (b: Byte) => (b | 0x1).toByte)
       map.changeValue(e.dstId, 0x2, (b: Byte) => (b | 0x2).toByte)
<SEP>
    var dstId: VertexId = 0,
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
    index: Int,
<SEP>
    val map = new GraphXPrimitiveKeyOpenHashMap[VertexId, Byte]
     edgePartition.iterator.foreach { e =>
       map.changeValue(e.srcId, 0x1, (b: Byte) => (b | 0x1).toByte)
       map.changeValue(e.dstId, 0x2, (b: Byte) => (b | 0x2).toByte)
     }
     map.iterator.map { vidAndPosition =>
<SEP>
      map.changeValue(e.dstId, 0x2, (b: Byte) => (b | 0x2).toByte)
<SEP>
          { currLocalId += 1; local2global += dstId; currLocalId }, identity)
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
  val size: Int = localSrcIds.length
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    val fetchWaitTime: Long,
<SEP>
    var attr: ED = null.asInstanceOf[ED])
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
      (context: TaskContext, index: Int, iter: Iterator[T]) => cleanedF(iter),
<SEP>
      map.changeValue(e.dstId, 0x2, (b: Byte) => (b | 0x2).toByte)
<SEP>
  def iterator: Iterator[Edge[ED]] = new Iterator[Edge[ED]] {
<SEP>
      map.changeValue(e.srcId, 0x1, (b: Byte) => (b | 0x1).toByte)
<SEP>
    val tracker = SparkEnv.get.mapOutputTracker.asInstanceOf[MapOutputTrackerMaster]
     val dep = dependencies.head.asInstanceOf[ShuffleDependency[K, V, C]]
     tracker.getPreferredLocationsForShuffle(dep, partition.index)
<SEP>
  override def getStorageLevel: StorageLevel = partitionsRDD.getStorageLevel
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    val memoryUsed: Long,
<SEP>
            val data = message._2
             builder.add(data._1, data._2, data._3)
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
    override def hasNext: Boolean = pos < EdgePartition.this.size
<SEP>
    val recordsWritten: Long)
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val diskBytesSpilled: Long,
<SEP>
    var srcId: VertexId = 0,
<SEP>
    val edgeArray = edges.trim().array
     new Sorter(Edge.edgeArraySortDataFormat[ED])
       .sort(edgeArray, 0, edgeArray.length, Edge.lexicographicOrdering)
     val localSrcIds = new Array[Int](edgeArray.length)
     val localDstIds = new Array[Int](edgeArray.length)
     val data = new Array[ED](edgeArray.length)
     val index = new GraphXPrimitiveKeyOpenHashMap[VertexId, Int]
     val global2local = new GraphXPrimitiveKeyOpenHashMap[VertexId, Int]
     val local2global = new PrimitiveVector[VertexId]
     var vertexAttrs = Array.empty[VD]
     // Copy edges into columnar structures, tracking the beginnings of source vertex id clusters and
     // adding them to the index. Also populate a map from vertex id to a sequential local offset.
     if (edgeArray.length > 0) {
       index.update(edgeArray(0).srcId, 0)
       var currSrcId: VertexId = edgeArray(0).srcId
       var currLocalId = -1
       var i = 0
       while (i < edgeArray.length) {
         val srcId = edgeArray(i).srcId
         val dstId = edgeArray(i).dstId
         localSrcIds(i) = global2local.changeValue(srcId,
           { currLocalId += 1; local2global += srcId; currLocalId }, identity)
         localDstIds(i) = global2local.changeValue(dstId,
           { currLocalId += 1; local2global += dstId; currLocalId }, identity)
         data(i) = edgeArray(i).attr
         if (srcId != currSrcId) {
           currSrcId = srcId
           index.update(currSrcId, i)
         }
 
         i += 1
       }
       vertexAttrs = new Array[VD](currLocalId + 1)
     }
     new EdgePartition(
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
    val resultSerializationTime: Long,
<SEP>
    var dstId: VertexId = 0,
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
    val keySet: OpenHashSet[K], var _values: Array[V])
<SEP>
      dst(dstPos) = src(srcPos)
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    new InheritableThreadLocal[AtomicReference[FileBlock]] {
<SEP>
  def sparkContext: SparkContext = sc
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
      map.changeValue(e.srcId, 0x1, (b: Byte) => (b | 0x1).toByte)
<SEP>
  def initialize(): Unit = inputBlock.get()
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
          { currLocalId += 1; local2global += srcId; currLocalId }, identity)
<SEP>
    val pos = keySet.addWithoutResize(k) & OpenHashSet.POSITION_MASK
     _values(pos) = v
     keySet.rehashIfNeeded(k, grow, move)
     _oldValues = null
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    val localBytesRead: Long,
<SEP>
    var attr: ED = null.asInstanceOf[ED])
<SEP>
    f(context, split.index, firstParent[T].iterator(split, context))
<SEP>
    val executorDeserializeTime: Long,
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
<SEP>
          { currLocalId += 1; local2global += dstId; currLocalId }, identity)
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
  @inline private def srcIds(pos: Int): VertexId = local2global(localSrcIds(pos))
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
              existingMetrics.incRecordsRead(1)
               delegate.next()
<SEP>
    val jobId: Int,
<SEP>
    val id: String,
<SEP>
    SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
    val jvmGcTime: Long,
<SEP>
      map.changeValue(e.srcId, 0x1, (b: Byte) => (b | 0x1).toByte)
<SEP>
      map.changeValue(e.dstId, 0x2, (b: Byte) => (b | 0x2).toByte)
<SEP>
    edgePartition.iterator.foreach { e =>
<SEP>
    val id: Int,
<SEP>
    var dstId: VertexId = 0,
<SEP>
  override def iterator: Iterator[(K, V)] = new Iterator[(K, V)] {
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
    val dep = dependencies.head.asInstanceOf[ShuffleDependency[K, V, C]]
     SparkEnv.get.shuffleManager.getReader(dep.shuffleHandle, split.index, split.index + 1, context)
       .read()
<SEP>
