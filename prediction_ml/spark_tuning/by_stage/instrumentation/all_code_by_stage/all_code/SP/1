object GraphLoader extends Logging {
<SEP>
    RDDOperationScope.withScope(sc, "checkpoint", allowNesting = false, ignoreParent = true) {
<SEP>
  override val partitioner = if (preservesPartitioning) firstParent[T].partitioner else None
<SEP>
<SEP>
  var parents: Seq[Partition] = parentsIndices.map(rdd.partitions(_))
<SEP>
  private var _oldValues: Array[V] = null
<SEP>
      System.arraycopy(src, srcPos, dst, dstPos, length)
<SEP>
  protected var grow = (newCapacity: Int) => {
<SEP>
  final def getNumPartitions: Int = partitions.length
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    edges += Edge(src, dst, d)
<SEP>
    val edgeArray = edges.trim().array
     new Sorter(Edge.edgeArraySortDataFormat[ED])
       .sort(edgeArray, 0, edgeArray.length, Edge.lexicographicOrdering)
     val localSrcIds = new Array[Int](edgeArray.length)
     val localDstIds = new Array[Int](edgeArray.length)
     val data = new Array[ED](edgeArray.length)
     val index = new GraphXPrimitiveKeyOpenHashMap[VertexId, Int]
     val global2local = new GraphXPrimitiveKeyOpenHashMap[VertexId, Int]
     val local2global = new PrimitiveVector[VertexId]
     var vertexAttrs = Array.empty[VD]
     // Copy edges into columnar structures, tracking the beginnings of source vertex id clusters and
     // adding them to the index. Also populate a map from vertex id to a sequential local offset.
     if (edgeArray.length > 0) {
       index.update(edgeArray(0).srcId, 0)
       var currSrcId: VertexId = edgeArray(0).srcId
       var currLocalId = -1
       var i = 0
       while (i < edgeArray.length) {
         val srcId = edgeArray(i).srcId
         val dstId = edgeArray(i).dstId
         localSrcIds(i) = global2local.changeValue(srcId,
           { currLocalId += 1; local2global += srcId; currLocalId }, identity)
         localDstIds(i) = global2local.changeValue(dstId,
           { currLocalId += 1; local2global += dstId; currLocalId }, identity)
         data(i) = edgeArray(i).attr
         if (srcId != currSrcId) {
           currSrcId = srcId
           index.update(currSrcId, i)
         }
 
         i += 1
       }
       vertexAttrs = new Array[VD](currLocalId + 1)
     }
     new EdgePartition(
<SEP>
    if (_sc == null) {
       throw new SparkException(
         "This RDD lacks a SparkContext. It could happen in the following cases: \n(1) RDD " +
         "transformations and actions are NOT invoked by the driver, but inside of other " +
         "transformations; for example, rdd1.map(x => rdd2.values.count() * x) is invalid " +
         "because the values transformation and count action cannot be performed inside of the " +
         "rdd1.map transformation. For more information, see SPARK-5063.\n(2) When a Spark " +
         "Streaming job recovers from checkpoint, this exception will be hit if a reference to " +
         "an RDD not defined by the streaming job is used in DStream operations. For more " +
         "information, See SPARK-13758.")
     }
     _sc
<SEP>
class VertexRDDImpl[VD] private[graphx] (
<SEP>
    new PairRDDFunctions(rdd)
<SEP>
    val recordsRead: Long)
<SEP>
  def persist(): this.type = persist(StorageLevel.MEMORY_ONLY)
<SEP>
    parents = parentsIndices.map(rdd.partitions(_))
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val attemptId: Int,
<SEP>
  final val Either: EdgeDirection = new EdgeDirection("Either")
<SEP>
  private[spark] val CHECKPOINT_ALL_MARKED_ANCESTORS =
<SEP>
  (implicit override protected val vdTag: ClassTag[VD])
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
  override def getStorageLevel: StorageLevel = partitionsRDD.getStorageLevel
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
    checkpointData.exists(_.isCheckpointed)
<SEP>
    val numParts = rdds.head.partitions.length
     if (!rdds.forall(rdd => rdd.partitions.length == numParts)) {
       throw new IllegalArgumentException(
<SEP>
  @transient protected lazy val isBarrier_ : Boolean =
<SEP>
      iter.foreach { line =>
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
    val otherPartition = other match {
       case other: VertexRDD[_] if this.partitioner == other.partitioner =>
         other.partitionsRDD
       case _ =>
         VertexRDD(other.partitionBy(this.partitioner.get)).partitionsRDD
     }
     val newPartitionsRDD = partitionsRDD.zipPartitions(
       otherPartition, preservesPartitioning = true
     ) { (thisIter, otherIter) =>
       val thisPart = thisIter.next()
       val otherPart = otherIter.next()
       Iterator(thisPart.diff(otherPart))
     }
     this.withPartitionsRDD(newPartitionsRDD)
<SEP>
    vertices.cache()
 
     // Convert the vertex partitions in edges to the correct type
     val newEdges = edges.asInstanceOf[EdgeRDDImpl[ED, _]]
       .mapEdgePartitions((pid, part) => part.withoutVertexAttributes[VD])
       .cache()
 
     GraphImpl.fromExistingRDDs(vertices, newEdges)
<SEP>
    val recordsWritten: Long)
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
    if (data.getStorageLevel == StorageLevel.NONE) {
<SEP>
    dependencies.filter(!_.isInstanceOf[ShuffleDependency[_, _, _]]).exists(_.rdd.isBarrier())
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    new VertexRDDImpl(this.partitionsRDD, targetStorageLevel)
<SEP>
    (f: (VertexId, VD) => VD2)(implicit eq: VD =:= VD2 = null): Graph[VD2, ED] = {
<SEP>
    g.aggregateMessagesWithActiveSet(
<SEP>
    preservesPartitioning: Boolean = false,
<SEP>
    val executorCpuTime: Long,
<SEP>
    new EdgeRDDImpl(partitionsRDD, this.targetStorageLevel)
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
    val targetStorageLevel: StorageLevel = StorageLevel.MEMORY_ONLY)
<SEP>
    dependencies.filter(!_.isInstanceOf[ShuffleDependency[_, _, _]]).exists(_.rdd.isBarrier())
<SEP>
      val exactMatchLocations = prefs.reduce((x, y) => x.intersect(y))
<SEP>
    val bytesRead: Long,
<SEP>
    var edges: EdgeRDDImpl[ED, VD],
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    val hostPort: String,
<SEP>
    new ZippedPartitionsRDD2(sc, sc.clean(f), this, rdd2, preservesPartitioning)
<SEP>
  private[graphx] def lexicographicOrdering[ED] = new Ordering[Edge[ED]] {
<SEP>
class PairRDDFunctions[K, V](self: RDD[(K, V)])
<SEP>
      if (!doCheckpointCalled) {
<SEP>
  var partitionValues = rdds.map(rdd => rdd.partitions(idx))
<SEP>
    @transient override val partitionsRDD: RDD[(PartitionID, EdgePartition[ED, VD])],
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
    val blockId = RDDBlockId(id, partition.index)
     var readCachedBlock = true
     // This method is called on executors, so we need call SparkEnv.get instead of sc.env.
     SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
    s.asInstanceOf[ZippedPartitionsPartition].preferredLocations
<SEP>
    val bytesWritten: Long,
<SEP>
  extends RDD[V](sc, rdds.map(x => new OneToOneDependency(x))) {
<SEP>
  def context: SparkContext = sc
<SEP>
object GraphLoader extends Logging {
<SEP>
  def partitionBy(partitioner: Partitioner): RDD[(K, V)] = self.withScope {
<SEP>
    parentsIndices: Array[Int],
<SEP>
    dependencies.head.rdd.asInstanceOf[RDD[U]]
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
    val scopeKey = SparkContext.RDD_SCOPE_KEY
     val noOverrideKey = SparkContext.RDD_SCOPE_NO_OVERRIDE_KEY
     val oldScopeJson = sc.getLocalProperty(scopeKey)
     val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
     val oldNoOverride = sc.getLocalProperty(noOverrideKey)
     try {
       if (ignoreParent) {
         // Ignore all parent settings and scopes and start afresh with our own root scope
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name).toJson)
       } else if (sc.getLocalProperty(noOverrideKey) == null) {
         // Otherwise, set the scope only if the higher level caller allows us to do so
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name, oldScope).toJson)
       }
       // Optionally disallow the child body to override our scope
       if (!allowNesting) {
         sc.setLocalProperty(noOverrideKey, "true")
       }
       body
     } finally {
       // Remember to restore any state that was modified before exiting
       sc.setLocalProperty(scopeKey, oldScopeJson)
       sc.setLocalProperty(noOverrideKey, oldNoOverride)
<SEP>
    if (isLocallyCheckpointed) {
<SEP>
  private val stateLock = new Integer(0)
<SEP>
    Array.tabulate[Partition](part.numPartitions)(i => new ShuffledRDDPartition(i))
<SEP>
    val shuffled = messages.partitionBy(this.partitioner.get)
     val parts = partitionsRDD.zipPartitions(shuffled, true) { (thisIter, msgIter) =>
       thisIter.map(_.aggregateUsingIndex(msgIter, reduceFunc))
     }
     this.withPartitionsRDD[VD2](parts)
<SEP>
              initLocalJobConfFuncOpt.foreach(f => f(newJobConf))
<SEP>
    val name: String,
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
private[spark] object HadoopRDD extends Logging {
<SEP>
  @transient var name: String = _
<SEP>
    val iter = new NextIterator[(K, V)] {
<SEP>
          .map { conf =>
<SEP>
      (context: TaskContext, index: Int, iter: Iterator[T]) => cleanedF(index, iter),
<SEP>
  def partitionBy(partitioner: Partitioner): RDD[(K, V)] = self.withScope {
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    if (isCheckpointedAndMaterialized) {
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val targetStorageLevel: StorageLevel = StorageLevel.MEMORY_ONLY)
<SEP>
    val executors: Seq[String])
<SEP>
      private val inputMetrics = context.taskMetrics().inputMetrics
<SEP>
          { currLocalId += 1; local2global += dstId; currLocalId }, identity)
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
    Option(sc.getLocalProperty(SparkContext.RDD_SCOPE_KEY)).map(RDDOperationScope.fromJson)
<SEP>
  val CONFIGURATION_INSTANTIATION_LOCK = new Object()
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
class VertexRDDImpl[VD] private[graphx] (
<SEP>
    index: Int,
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
      allowNesting: Boolean = false)(body: => T): T = {
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
      .map(_.getMethodName)
<SEP>
private[spark] class PeriodicGraphCheckpointer[VD, ED](
<SEP>
object GraphLoader extends Logging {
<SEP>
    val numParts = rdds.head.partitions.length
     if (!rdds.forall(rdd => rdd.partitions.length == numParts)) {
       throw new IllegalArgumentException(
<SEP>
      val builder = new EdgePartitionBuilder[Int, Int]
       iter.foreach { line =>
         if (!line.isEmpty && line(0) != '#') {
           val lineArray = line.split("\\s+")
           if (lineArray.length < 2) {
             throw new IllegalArgumentException("Invalid line: " + line)
           }
           val srcId = lineArray(0).toLong
           val dstId = lineArray(1).toLong
           if (canonicalOrientation && srcId > dstId) {
             builder.add(dstId, srcId, 1)
           } else {
             builder.add(srcId, dstId, 1)
           }
         }
       }
       Iterator((pid, builder.toEdgePartition))
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    val tracker = SparkEnv.get.mapOutputTracker.asInstanceOf[MapOutputTrackerMaster]
     val dep = dependencies.head.asInstanceOf[ShuffleDependency[K, V, C]]
     tracker.getPreferredLocationsForShuffle(dep, partition.index)
<SEP>
  override def getStorageLevel: StorageLevel = partitionsRDD.getStorageLevel
<SEP>
object GraphLoader extends Logging {
<SEP>
    val serializer = userSpecifiedSerializer.getOrElse {
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    Array.tabulate[Partition](numParts) { i =>
<SEP>
      maxIterations: Int = Int.MaxValue,
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
    val resultSerializationTime: Long,
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
          dependencies.foreach(_.rdd.doCheckpoint())
<SEP>
      .dropWhile(_.getMethodName != ourMethodName)
<SEP>
    Array.tabulate[Partition](part.numPartitions)(i => new ShuffledRDDPartition(i))
<SEP>
  def sparkContext: SparkContext = sc
<SEP>
  def initialize(): Unit = inputBlock.get()
<SEP>
    val pos = keySet.addWithoutResize(k) & OpenHashSet.POSITION_MASK
     _values(pos) = v
     keySet.rehashIfNeeded(k, grow, move)
     _oldValues = null
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  def nextScopeId(): Int = scopeCounter.getAndIncrement
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
  def getCachedMetadata(key: String): Any = SparkEnv.get.hadoopJobMetadata.get(key)
<SEP>
private[spark] class PeriodicRDDCheckpointer[T](
<SEP>
      context.addTaskCompletionListener[Unit] { context =>
<SEP>
    val executorDeserializeTime: Long,
<SEP>
    var rdds: Seq[RDD[_]],
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
  private val createTime = new Date()
<SEP>
    zipPartitions(rdd2, preservesPartitioning = false)(f)
<SEP>
    jsonMapper.readValue(s, classOf[RDDOperationScope])
<SEP>
      private val split = theSplit.asInstanceOf[HadoopPartition]
<SEP>
    require(filePath != null, "filePath cannot be null")
     require(startOffset >= 0, s"startOffset ($startOffset) cannot be negative")
     require(length >= -1, s"length ($length) cannot be smaller than -1")
     inputBlock.get().set(new FileBlock(UTF8String.fromString(filePath), startOffset, length))
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String,
<SEP>
    SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
    var hasDstId: Boolean = false) {
<SEP>
    new EdgeRDDImpl(edgePartitions)
<SEP>
    new VertexRDDImpl(partitionsRDD, this.targetStorageLevel)
<SEP>
    val id: Int,
<SEP>
    var dstId: VertexId = 0,
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
    isOrderSensitive: Boolean = false)
<SEP>
    val bytesWritten: Long,
<SEP>
      val tmp = data(pos0)
       data(pos0) = data(pos1)
       data(pos1) = tmp
<SEP>
  override val partitioner =
<SEP>
    val resultSize: Long,
<SEP>
    @transient val partitionsRDD: RDD[ShippableVertexPartition[VD]],
<SEP>
    @transient val vertices: VertexRDD[VD],
<SEP>
<SEP>
    var hasSrcId: Boolean = false,
<SEP>
    partition.asInstanceOf[CoalescedRDDPartition].parents.iterator.flatMap { parentPartition =>
<SEP>
  private[spark] override def isBarrier(): Boolean = false
<SEP>
  override val index: Int = idx
<SEP>
    val localBlocksFetched: Long,
<SEP>
  protected val jobConfCacheKey: String = "rdd_%d_job_conf".format(id)
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
      .find(_.getMethodName != ourMethodName)
<SEP>
  val id: Int = sc.newRddId()
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
            HadoopRDD.CONFIGURATION_INSTANTIATION_LOCK.synchronized {
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
    val writeTime: Long,
<SEP>
      if (a.srcId == b.srcId) {
<SEP>
    val peakExecutionMemory: Long,
<SEP>
    isFromBarrier: Boolean = false,
<SEP>
      (f: (Iterator[T], Iterator[B]) => Iterator[V]): RDD[V] = withScope {
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
    if (!rdds.forall(rdd => rdd.partitions.length == numParts)) {
<SEP>
    val stageId: Int,
<SEP>
    val serializer = userSpecifiedSerializer.getOrElse {
       val serializerManager = SparkEnv.get.serializerManager
       if (mapSideCombine) {
         serializerManager.getSerializer(implicitly[ClassTag[K]], implicitly[ClassTag[C]])
       } else {
         serializerManager.getSerializer(implicitly[ClassTag[K]], implicitly[ClassTag[V]])
       }
     }
     List(new ShuffleDependency(prev, part, serializer, keyOrdering, aggregator, mapSideCombine))
<SEP>
  private[spark] def elementClassTag: ClassTag[T] = classTag[T]
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
        getBytesReadCallback.foreach { getBytesRead =>
<SEP>
  def count(): Long = sc.runJob(this, Utils.getIteratorSize _).sum
<SEP>
      data(pos)
<SEP>
            partitions_.zipWithIndex.foreach { case (partition, index) =>
<SEP>
        if (reader != null) {
<SEP>
        getBytesReadCallback.foreach { getBytesRead =>
<SEP>
    val keySet: OpenHashSet[K], var _values: Array[V])
<SEP>
  private[spark] def withScope[U](body: => U): U = RDDOperationScope.withScope[U](sc)(body)
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
      sc.cleaner.foreach(_.registerRDDForCleanup(this))
<SEP>
    fromEdgeRDD(EdgeRDD.fromEdgePartitions(edgePartitions), defaultVertexAttr, edgeStorageLevel,
<SEP>
  val inputSplit = new SerializableWritable[InputSplit](s)
<SEP>
class EdgeRDDImpl[ED: ClassTag, VD: ClassTag] private[graphx] (
<SEP>
    val recordsRead: Long)
<SEP>
      val prefs = rdds.map(rdd => rdd.preferredLocations(rdd.partitions(i)))
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
  private[graphx] def edgeArraySortDataFormat[ED] = new SortDataFormat[Edge[ED], Array[Edge[ED]]] {
<SEP>
    @transient val replicatedVertexView: ReplicatedVertexView[VD, ED])
<SEP>
  private[graphx] def lexicographicOrdering[ED] = new Ordering[Edge[ED]] {
<SEP>
    parents = parentsIndices.map(rdd.partitions(_))
     oos.defaultWriteObject()
<SEP>
class ShuffledRDD[K: ClassTag, V: ClassTag, C: ClassTag](
<SEP>
      getPreferredLocations(split)
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
  override val partitioner =
<SEP>
          { currLocalId += 1; local2global += srcId; currLocalId }, identity)
<SEP>
  protected var move = (oldPos: Int, newPos: Int) => {
<SEP>
      .setName("ReplicatedVertexView.updateVertices - shippedVerts %s %s (broadcast)".format(
         hasSrcId, hasDstId))
       .partitionBy(edges.partitioner.get)
 
     val newEdges = edges.withPartitionsRDD(edges.partitionsRDD.zipPartitions(shippedVerts) {
       (ePartIter, shippedVertsIter) => ePartIter.map {
         case (pid, edgePartition) =>
           (pid, edgePartition.updateVertices(shippedVertsIter.flatMap(_._2.iterator)))
       }
     })
     new ReplicatedVertexView(newEdges, hasSrcId, hasDstId)
<SEP>
      activeSetOpt: Option[(VertexRDD[_], EdgeDirection)] = None): VertexRDD[A] = {
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
      val prefs = rdds.map(rdd => rdd.preferredLocations(rdd.partitions(i)))
       // Check whether there are any hosts that match all RDDs; otherwise return the union
       val exactMatchLocations = prefs.reduce((x, y) => x.intersect(y))
       val locs = if (!exactMatchLocations.isEmpty) exactMatchLocations else prefs.flatten.distinct
       new ZippedPartitionsPartition(i, rdds, locs)
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
private[spark] class HadoopPartition(rddId: Int, override val index: Int, s: InputSplit)
<SEP>
    @transient val preferredLocations: Seq[String])
<SEP>
    s.asInstanceOf[ZippedPartitionsPartition].preferredLocations
<SEP>
    var srcId: VertexId = 0,
<SEP>
        updateBytesRead()
         closeIfNeeded()
<SEP>
    if (storageLevel != StorageLevel.NONE) {
<SEP>
    val vid2pid = edges.partitionsRDD.mapPartitions(_.flatMap(
       Function.tupled(RoutingTablePartition.edgePartitionToMsgs)))
       .setName("VertexRDD.createRoutingTables - vid2pid (aggregation)")
 
     val numEdgePartitions = edges.partitions.length
     vid2pid.partitionBy(vertexPartitioner).mapPartitions(
<SEP>
  override val partitioner = partitionsRDD.partitioner
<SEP>
    size: Int = 64) {
<SEP>
    parent.map(_.getAllScopes).getOrElse(Seq.empty) ++ Seq(this)
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
      firstParent[T].iterator(parentPartition, context)
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
    parent.map(_.getAllScopes).getOrElse(Seq.empty) ++ Seq(this)
<SEP>
  def count(): Long = sc.runJob(this, Utils.getIteratorSize _).sum
<SEP>
  private def makeMap(x: (VertexId, Int)*) = Map(x: _*)
<SEP>
    @transient var prev: RDD[_ <: Product2[K, V]],
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
  override def getPartitions: Array[Partition] = firstParent[T].partitions
<SEP>
    val remoteBytesRead: Long,
<SEP>
  def unset(): Unit = inputBlock.remove()
<SEP>
    val jobID = new JobID(jobTrackerId, jobId)
     val taId = new TaskAttemptID(new TaskID(jobID, TaskType.MAP, splitId), attemptId)
 
     conf.set("mapreduce.task.id", taId.getTaskID.toString)
     conf.set("mapreduce.task.attempt.id", taId.toString)
     conf.setBoolean("mapreduce.task.ismap", true)
     conf.setInt("mapreduce.task.partition", splitId)
     conf.set("mapreduce.job.id", jobID.toString)
<SEP>
          { currLocalId += 1; local2global += dstId; currLocalId }, identity)
<SEP>
  var parents: Seq[Partition] = parentsIndices.map(rdd.partitions(_))
<SEP>
    val executorRunTime: Long,
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
    @transient rdd: RDD[_],
<SEP>
    var hasDstId: Boolean = false) {
<SEP>
          inputMetrics.setBytesRead(existingBytesRead + getBytesRead())
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
  override val index: Int = idx
<SEP>
      private val existingBytesRead = inputMetrics.bytesRead
<SEP>
class GraphImpl[VD: ClassTag, ED: ClassTag] protected (
<SEP>
    new GraphImpl(vertices, new ReplicatedVertexView(edges.asInstanceOf[EdgeRDDImpl[ED, VD]]))
<SEP>
      logInfo("Input split: " + split.inputSplit)
<SEP>
    val diskUsed: Long,
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    var hasSrcId: Boolean = false,
<SEP>
        if (!line.isEmpty && line(0) != '#') {
<SEP>
    checkpointData match {
<SEP>
    val newPartitionsRDD = partitionsRDD.mapPartitions(_.map(f), preservesPartitioning = true)
     this.withPartitionsRDD(newPartitionsRDD)
<SEP>
    if (eq != null) {
<SEP>
          { currLocalId += 1; local2global += srcId; currLocalId }, identity)
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
    val routingTables = createRoutingTables(edges, new HashPartitioner(numPartitions))
     val vertexPartitions = routingTables.mapPartitions({ routingTableIter =>
       val routingTable =
         if (routingTableIter.hasNext) routingTableIter.next() else RoutingTablePartition.empty
       Iterator(ShippableVertexPartition(Iterator.empty, routingTable, defaultVal))
     }, preservesPartitioning = true)
     new VertexRDDImpl(vertexPartitions)
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
object GraphLoader extends Logging {
<SEP>
  private[spark] def keyClass: Class[_] = kt.runtimeClass
<SEP>
    val fetchWaitTime: Long,
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
  override val partitioner =
<SEP>
    val targetStorageLevel: StorageLevel = StorageLevel.MEMORY_ONLY)
<SEP>
    val conf: Configuration = broadcastedConf.value.value
     if (shouldCloneJobConf) {
       // Hadoop Configuration objects are not thread-safe, which may lead to various problems if
       // one job modifies a configuration while another reads it (SPARK-2546).  This problem occurs
       // somewhat rarely because most jobs treat the configuration as though it's immutable.  One
       // solution, implemented here, is to clone the Configuration object.  Unfortunately, this
       // clone can be very expensive.  To avoid unexpected performance regressions for workloads and
       // Hadoop versions that do not suffer from these thread-safety issues, this cloning is
       // disabled by default.
       HadoopRDD.CONFIGURATION_INSTANTIATION_LOCK.synchronized {
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
      (f: (Iterator[T], Iterator[B]) => Iterator[V]): RDD[V] = withScope {
<SEP>
    new MapPartitionsRDD[U, T](this, (context, pid, iter) => iter.map(cleanF))
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    val memoryUsed: Long,
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
  override protected def getPartitions: Array[Partition] = partitionsRDD.partitions
<SEP>
    val startTime = System.currentTimeMillis
 
     // Parse the edge data table directly into edge partitions
     val lines =
       if (numEdgePartitions > 0) {
         sc.textFile(path, numEdgePartitions).coalesce(numEdgePartitions)
       } else {
         sc.textFile(path)
       }
     val edges = lines.mapPartitionsWithIndex { (pid, iter) =>
       val builder = new EdgePartitionBuilder[Int, Int]
       iter.foreach { line =>
         if (!line.isEmpty && line(0) != '#') {
           val lineArray = line.split("\\s+")
           if (lineArray.length < 2) {
             throw new IllegalArgumentException("Invalid line: " + line)
           }
           val srcId = lineArray(0).toLong
           val dstId = lineArray(1).toLong
           if (canonicalOrientation && srcId > dstId) {
             builder.add(dstId, srcId, 1)
           } else {
             builder.add(srcId, dstId, 1)
           }
         }
       }
       Iterator((pid, builder.toEdgePartition))
     }.persist(edgeStorageLevel).setName("GraphLoader.edgeListFile - edges (%s)".format(path))
     edges.count()
 
     logInfo("It took %d ms to load the edges".format(System.currentTimeMillis - startTime))
 
     GraphImpl.fromEdgePartitions(edges, defaultVertexAttr = 1, edgeStorageLevel = edgeStorageLevel,
<SEP>
    val recordsWritten: Long)
<SEP>
  private var mapSideCombine: Boolean = false
<SEP>
    val diskBytesSpilled: Long,
<SEP>
    var rdds: Seq[RDD[_]],
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
object Pregel extends Logging {
<SEP>
    vertices.cache()
     // For each vertex, replicate its attribute only to partitions where it is
     // in the relevant position in an edge.
     replicatedVertexView.upgrade(vertices, tripletFields.useSrc, tripletFields.useDst)
     val view = activeSetOpt match {
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
      dst(dstPos) = src(srcPos)
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
      activeDirection: EdgeDirection = EdgeDirection.Either)
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    new InheritableThreadLocal[AtomicReference[FileBlock]] {
<SEP>
  @transient var name: String = _
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
    partitionsRDD.partitioner.orElse(Some(new HashPartitioner(partitions.length)))
<SEP>
    SparkEnv.get.hadoopJobMetadata.put(key, value)
<SEP>
object GraphLoader extends Logging {
<SEP>
    val ourMethodName = "withScope"
     val callerMethodName = Thread.currentThread.getStackTrace()
       .dropWhile(_.getMethodName != ourMethodName)
       .find(_.getMethodName != ourMethodName)
       .map(_.getMethodName)
       .getOrElse {
         // Log a warning just in case, but this should almost certainly never happen
         logWarning("No valid method name for this RDD operation scope!")
         "N/A"
       }
     withScope[T](sc, callerMethodName, allowNesting, ignoreParent = false)(body)
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
    var hasSrcId: Boolean = false,
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    val localBytesRead: Long,
<SEP>
    partition.asInstanceOf[CoalescedRDDPartition].parents.iterator.flatMap { parentPartition =>
<SEP>
    val newInputFormat = ReflectionUtils.newInstance(inputFormatClass.asInstanceOf[Class[_]], conf)
       .asInstanceOf[InputFormat[K, V]]
     newInputFormat match {
       case c: Configurable => c.setConf(conf)
       case _ =>
     }
     newInputFormat
<SEP>
    val edges = lines.mapPartitionsWithIndex { (pid, iter) =>
<SEP>
    f(context, split.index, firstParent[T].iterator(split, context))
<SEP>
    val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
<SEP>
      if (!doCheckpointCalled) {
<SEP>
    this.withPartitionsRDD[ED2, VD2](partitionsRDD.mapPartitions({ iter =>
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
    name = _name
     this
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
class HadoopRDD[K, V](
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val targetStorageLevel: StorageLevel = StorageLevel.MEMORY_ONLY)
<SEP>
    val jobId: Int,
<SEP>
    var edges: EdgeRDDImpl[ED, VD],
<SEP>
    val jvmGcTime: Long,
<SEP>
    var hasDstId: Boolean = false) {
<SEP>
    partitionsRDD.mapPartitions(_.flatMap(_.shipVertexAttributes(shipSrc, shipDst)))
<SEP>
  protected def getDependencies: Seq[Dependency[_]] = deps
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
