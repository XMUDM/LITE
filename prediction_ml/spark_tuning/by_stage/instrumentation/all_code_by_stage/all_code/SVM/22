    RDDOperationScope.withScope(sc, "checkpoint", allowNesting = false, ignoreParent = true) {
<SEP>
  implicit def fromRDD[T: ClassTag](rdd: RDD[T]): RDDFunctions[T] = new RDDFunctions[T](rdd)
<SEP>
  final def getNumPartitions: Int = partitions.length
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    val parRDDs = if (isPartitionListingParallel) {
       val parArray = rdds.par
       parArray.tasksupport = UnionRDD.partitionEvalTaskSupport
       parArray
     } else {
       rdds
     }
     val array = new Array[Partition](parRDDs.map(_.partitions.length).seq.sum)
     var pos = 0
     for ((rdd, rddIndex) <- rdds.zipWithIndex; split <- rdd.partitions) {
       array(pos) = new UnionPartition(pos, rdd, rddIndex, split.index)
       pos += 1
     }
     array
<SEP>
      agg.scanLeft(new BinaryLabelCounter())((agg, c) => agg.clone() += c)
<SEP>
    if (_sc == null) {
       throw new SparkException(
         "This RDD lacks a SparkContext. It could happen in the following cases: \n(1) RDD " +
         "transformations and actions are NOT invoked by the driver, but inside of other " +
         "transformations; for example, rdd1.map(x => rdd2.values.count() * x) is invalid " +
         "because the values transformation and count action cannot be performed inside of the " +
         "rdd1.map transformation. For more information, see SPARK-5063.\n(2) When a Spark " +
         "Streaming job recovers from checkpoint, this exception will be hit if a reference to " +
         "an RDD not defined by the streaming job is used in DStream operations. For more " +
         "information, See SPARK-13758.")
     }
     _sc
<SEP>
    val recordsRead: Long)
<SEP>
  def persist(): this.type = persist(StorageLevel.MEMORY_ONLY)
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val attemptId: Int,
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
  private[spark] val CHECKPOINT_ALL_MARKED_ANCESTORS =
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
    checkpointData.exists(_.isCheckpointed)
<SEP>
  @transient protected lazy val isBarrier_ : Boolean =
<SEP>
      (0 until numSlices).iterator.map { i =>
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
    locationPrefs.getOrElse(s.index, Nil)
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
    val recordsWritten: Long)
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
    dependencies.filter(!_.isInstanceOf[ShuffleDependency[_, _, _]]).exists(_.rdd.isBarrier())
<SEP>
    for ((rdd, rddIndex) <- rdds.zipWithIndex; split <- rdd.partitions) {
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
    var numPositives: Long = 0L,
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    preservesPartitioning: Boolean = false,
<SEP>
    val executorCpuTime: Long,
<SEP>
    if (numSlices < 1) {
       throw new IllegalArgumentException("Positive number of partitions required")
     }
     // Sequences need to be sliced at the same set of index positions for operations
     // like RDD.zip() to behave as expected
     def positions(length: Long, numSlices: Int): Iterator[(Int, Int)] = {
       (0 until numSlices).iterator.map { i =>
         val start = ((i * length) / numSlices).toInt
         val end = (((i + 1) * length) / numSlices).toInt
         (start, end)
       }
     }
     seq match {
<SEP>
class BinaryClassificationMetrics @Since("1.3.0") (
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
    dependencies.filter(!_.isInstanceOf[ShuffleDependency[_, _, _]]).exists(_.rdd.isBarrier())
<SEP>
    val bytesRead: Long,
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    val hostPort: String,
<SEP>
      if (!doCheckpointCalled) {
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
    val bytesWritten: Long,
<SEP>
  def context: SparkContext = sc
<SEP>
    dependencies.head.rdd.asInstanceOf[RDD[U]]
<SEP>
    var numNegatives: Long = 0L) extends Serializable {
<SEP>
    val scopeKey = SparkContext.RDD_SCOPE_KEY
     val noOverrideKey = SparkContext.RDD_SCOPE_NO_OVERRIDE_KEY
     val oldScopeJson = sc.getLocalProperty(scopeKey)
     val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
     val oldNoOverride = sc.getLocalProperty(noOverrideKey)
     try {
       if (ignoreParent) {
         // Ignore all parent settings and scopes and start afresh with our own root scope
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name).toJson)
       } else if (sc.getLocalProperty(noOverrideKey) == null) {
         // Otherwise, set the scope only if the higher level caller allows us to do so
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name, oldScope).toJson)
       }
       // Optionally disallow the child body to override our scope
       if (!allowNesting) {
         sc.setLocalProperty(noOverrideKey, "true")
       }
       body
     } finally {
       // Remember to restore any state that was modified before exiting
       sc.setLocalProperty(scopeKey, oldScopeJson)
       sc.setLocalProperty(noOverrideKey, oldNoOverride)
<SEP>
    if (isLocallyCheckpointed) {
<SEP>
    var numPositives: Long = 0L,
<SEP>
    for ((rdd, rddIndex) <- rdds.zipWithIndex; split <- rdd.partitions) {
<SEP>
  private val stateLock = new Integer(0)
<SEP>
    val deps = new ArrayBuffer[Dependency[_]]
     var pos = 0
     for (rdd <- rdds) {
       deps += new RangeDependency(rdd, 0, pos, rdd.partitions.length)
       pos += rdd.partitions.length
     }
     deps
<SEP>
    val name: String,
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
  @transient var name: String = _
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    if (isCheckpointedAndMaterialized) {
<SEP>
        val start = ((i * length) / numSlices).toInt
         val end = (((i + 1) * length) / numSlices).toInt
         (start, end)
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
  private[spark] def conf = sc.conf
<SEP>
    Option(sc.getLocalProperty(SparkContext.RDD_SCOPE_KEY)).map(RDDOperationScope.fromJson)
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
      iter.foreach(agg += _)
<SEP>
      allowNesting: Boolean = false)(body: => T): T = {
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
      .map(_.getMethodName)
<SEP>
class BinaryClassificationMetrics @Since("1.3.0") (
<SEP>
    val results = sc.runJob(this, (iter: Iterator[T]) => iter.toArray)
     Array.concat(results: _*)
<SEP>
    val array = new Array[Partition](parRDDs.map(_.partitions.length).seq.sum)
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    val tracker = SparkEnv.get.mapOutputTracker.asInstanceOf[MapOutputTrackerMaster]
     val dep = dependencies.head.asInstanceOf[ShuffleDependency[K, V, C]]
     tracker.getPreferredLocationsForShuffle(dep, partition.index)
<SEP>
    locationPrefs.getOrElse(s.index, Nil)
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val resultSerializationTime: Long,
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
<SEP>
          dependencies.foreach(_.rdd.doCheckpoint())
<SEP>
    val slices = ParallelCollectionRDD.slice(data, numSlices).toArray
     slices.indices.map(i => new ParallelCollectionPartition(id, i, slices(i))).toArray
<SEP>
      .dropWhile(_.getMethodName != ourMethodName)
<SEP>
  override val index: Int = idx
<SEP>
  def sparkContext: SparkContext = sc
<SEP>
  def initialize(): Unit = inputBlock.get()
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  def nextScopeId(): Int = scopeCounter.getAndIncrement
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
    val executorDeserializeTime: Long,
<SEP>
<SEP>
class BinaryClassificationMetrics @Since("1.3.0") (
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
<SEP>
  override def index: Int = slice
<SEP>
    jsonMapper.readValue(s, classOf[RDDOperationScope])
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    var numNegatives: Long = 0L) extends Serializable {
<SEP>
    val id: String,
<SEP>
    slices.indices.map(i => new ParallelCollectionPartition(id, i, slices(i))).toArray
<SEP>
    val id: Int,
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
    val results = sc.runJob(this, (iter: Iterator[T]) => iter.toArray)
<SEP>
    isOrderSensitive: Boolean = false)
<SEP>
    val bytesWritten: Long,
<SEP>
    val resultSize: Long,
<SEP>
  private[spark] override def isBarrier(): Boolean = false
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
    var rdds: Seq[RDD[T]])
<SEP>
    val localBlocksFetched: Long,
<SEP>
      .find(_.getMethodName != ourMethodName)
<SEP>
  val id: Int = sc.newRddId()
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
    val agg = binnedCounts.values.mapPartitions { iter =>
<SEP>
    val writeTime: Long,
<SEP>
    val peakExecutionMemory: Long,
<SEP>
    isFromBarrier: Boolean = false,
<SEP>
    val stageId: Int,
<SEP>
  private[spark] def elementClassTag: ClassTag[T] = classTag[T]
<SEP>
    numPositives += other.numPositives
     numNegatives += other.numNegatives
     this
<SEP>
class BinaryClassificationMetrics @Since("1.3.0") (
<SEP>
  def preferredLocations(): Seq[String] = rdd.preferredLocations(parentPartition)
<SEP>
            partitions_.zipWithIndex.foreach { case (partition, index) =>
<SEP>
class BinaryClassificationMetrics @Since("1.3.0") (
<SEP>
class SlidingRDD[T: ClassTag](@transient val parent: RDD[T], val windowSize: Int, val step: Int)
<SEP>
  private[spark] def withScope[U](body: => U): U = RDDOperationScope.withScope[U](sc)(body)
<SEP>
      deps += new RangeDependency(rdd, 0, pos, rdd.partitions.length)
       pos += rdd.partitions.length
<SEP>
      sc.cleaner.foreach(_.registerRDDForCleanup(this))
<SEP>
    var numNegatives: Long = 0L) extends Serializable {
<SEP>
    var slice: Int,
<SEP>
    @transient private val rdd: RDD[T],
<SEP>
    val recordsRead: Long)
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
class ShuffledRDD[K: ClassTag, V: ClassTag, C: ClassTag](
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
      getPreferredLocations(split)
<SEP>
    var numPositives: Long = 0L,
<SEP>
    for ((rdd, rddIndex) <- rdds.zipWithIndex; split <- rdd.partitions) {
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
  def sliding(windowSize: Int): RDD[Array[T]] = sliding(windowSize, 1)
<SEP>
    for (rdd <- rdds) {
<SEP>
  def collect(): Array[T] = withScope {
<SEP>
<SEP>
    if (storageLevel != StorageLevel.NONE) {
<SEP>
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
    parent.map(_.getAllScopes).getOrElse(Seq.empty) ++ Seq(this)
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
    parent.map(_.getAllScopes).getOrElse(Seq.empty) ++ Seq(this)
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
  override def getPartitions: Array[Partition] = firstParent[T].partitions
<SEP>
    val remoteBytesRead: Long,
<SEP>
  def unset(): Unit = inputBlock.remove()
<SEP>
    val executorRunTime: Long,
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
      array(pos) = new UnionPartition(pos, rdd, rddIndex, split.index)
       pos += 1
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
  override val index: Int = idx
<SEP>
  def values: RDD[V] = self.map(_._2)
<SEP>
        positions(array.length, numSlices).map { case (start, end) =>
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    checkpointData match {
<SEP>
    rdds.length > conf.getInt("spark.rdd.parallelListingThreshold", 10)
<SEP>
    s.asInstanceOf[UnionPartition[T]].preferredLocations()
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
      val agg = new BinaryLabelCounter()
       iter.foreach(agg += _)
       Iterator(agg)
<SEP>
    val fetchWaitTime: Long,
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
class SlidingRDD[T: ClassTag](@transient val parent: RDD[T], val windowSize: Int, val step: Int)
<SEP>
      (context: TaskContext, index: Int, iter: Iterator[T]) => cleanedF(iter),
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
    new MapPartitionsRDD[U, T](this, (context, pid, iter) => iter.map(cleanF))
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
    val recordsWritten: Long)
<SEP>
    val diskBytesSpilled: Long,
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
  var parentPartition: Partition = rdd.partitions(parentRddPartitionIndex)
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
    val rocCurve = createCurve(FalsePositiveRate, Recall)
     val sc = confusions.context
     val first = sc.makeRDD(Seq((0.0, 0.0)), 1)
     val last = sc.makeRDD(Seq((1.0, 1.0)), 1)
     new UnionRDD[(Double, Double)](sc, Seq(first, rocCurve, last))
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    new InheritableThreadLocal[AtomicReference[FileBlock]] {
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
    val ourMethodName = "withScope"
     val callerMethodName = Thread.currentThread.getStackTrace()
       .dropWhile(_.getMethodName != ourMethodName)
       .find(_.getMethodName != ourMethodName)
       .map(_.getMethodName)
       .getOrElse {
         // Log a warning just in case, but this should almost certainly never happen
         logWarning("No valid method name for this RDD operation scope!")
         "N/A"
       }
     withScope[T](sc, callerMethodName, allowNesting, ignoreParent = false)(body)
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    val localBytesRead: Long,
<SEP>
  def collect(): Array[T] = withScope {
<SEP>
    f(context, split.index, firstParent[T].iterator(split, context))
<SEP>
    val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
<SEP>
      if (!doCheckpointCalled) {
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
    for ((rdd, rddIndex) <- rdds.zipWithIndex; split <- rdd.partitions) {
<SEP>
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
    val jobId: Int,
<SEP>
<SEP>
    val jvmGcTime: Long,
<SEP>
class BinaryClassificationMetrics @Since("1.3.0") (
<SEP>
<SEP>
  protected def getDependencies: Seq[Dependency[_]] = deps
<SEP>
    val dep = dependencies.head.asInstanceOf[ShuffleDependency[K, V, C]]
     SparkEnv.get.shuffleManager.getReader(dep.shuffleHandle, split.index, split.index + 1, context)
       .read()
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
