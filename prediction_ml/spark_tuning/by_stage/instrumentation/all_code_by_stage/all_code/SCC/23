    val bytesWritten: Long,
<SEP>
    val resultSize: Long,
<SEP>
  var parents: Seq[Partition] = parentsIndices.map(rdd.partitions(_))
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
    val executorRunTime: Long,
<SEP>
    val name: String,
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
    @transient rdd: RDD[_],
<SEP>
  @transient var name: String = _
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
  override val index: Int = idx
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
    val localBlocksFetched: Long,
<SEP>
  val id: Int = sc.newRddId()
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
    val recordsRead: Long)
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
    val writeTime: Long,
<SEP>
    val peakExecutionMemory: Long,
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
    parents = parentsIndices.map(rdd.partitions(_))
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    val attemptId: Int,
<SEP>
    val fetchWaitTime: Long,
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
    partitionValues = rdds.map(rdd => rdd.partitions(idx))
     oos.defaultWriteObject()
<SEP>
    val stageId: Int,
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
    val recordsWritten: Long)
<SEP>
    val diskBytesSpilled: Long,
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val recordsRead: Long)
<SEP>
    @transient private val rdds: Seq[RDD[_]],
<SEP>
    val recordsWritten: Long)
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
    val resultSerializationTime: Long,
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
  var partitionValues = rdds.map(rdd => rdd.partitions(idx))
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
      getPreferredLocations(split)
<SEP>
    parents = parentsIndices.map(rdd.partitions(_))
     oos.defaultWriteObject()
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    new InheritableThreadLocal[AtomicReference[FileBlock]] {
<SEP>
  def sparkContext: SparkContext = sc
<SEP>
    val executorCpuTime: Long,
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
  def initialize(): Unit = inputBlock.get()
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
    val localBytesRead: Long,
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
    val bytesRead: Long,
<SEP>
    val executorDeserializeTime: Long,
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    @transient val preferredLocations: Seq[String])
<SEP>
    partitionValues = rdds.map(rdd => rdd.partitions(idx))
<SEP>
    s.asInstanceOf[ZippedPartitionsPartition].preferredLocations
<SEP>
    val hostPort: String,
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
    s.asInstanceOf[ZippedPartitionsPartition].preferredLocations
<SEP>
    val bytesWritten: Long,
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String,
<SEP>
    val jobId: Int,
<SEP>
    val jvmGcTime: Long,
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
    parentsIndices: Array[Int],
<SEP>
    val id: Int,
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val remoteBytesRead: Long,
<SEP>
