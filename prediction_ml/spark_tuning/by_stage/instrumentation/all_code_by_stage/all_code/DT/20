    RDDOperationScope.withScope(sc, "checkpoint", allowNesting = false, ignoreParent = true) {
<SEP>
  implicit def pairFunToScalaFun[A, B, C](x: PairFunction[A, B, C]): A => (B, C) = y => x.call(y)
<SEP>
  override val partitioner = if (preservesPartitioning) firstParent[T].partitioner else None
<SEP>
  extends TreeEnsembleModel(algo, trees, Array.fill(trees.length)(1.0),
<SEP>
  def collectAsMap(): Map[K, V] = self.withScope {
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    if (_sc == null) {
       throw new SparkException(
         "This RDD lacks a SparkContext. It could happen in the following cases: \n(1) RDD " +
         "transformations and actions are NOT invoked by the driver, but inside of other " +
         "transformations; for example, rdd1.map(x => rdd2.values.count() * x) is invalid " +
         "because the values transformation and count action cannot be performed inside of the " +
         "rdd1.map transformation. For more information, see SPARK-5063.\n(2) When a Spark " +
         "Streaming job recovers from checkpoint, this exception will be hit if a reference to " +
         "an RDD not defined by the streaming job is used in DStream operations. For more " +
         "information, See SPARK-13758.")
     }
     _sc
<SEP>
    val recordsRead: Long)
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val attemptId: Int,
<SEP>
  private[spark] val CHECKPOINT_ALL_MARKED_ANCESTORS =
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
private[spark] abstract class ImpurityAggregator(val statsSize: Int) extends Serializable {
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
    Option(infos).map(_.flatMap { loc =>
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
    checkpointData.exists(_.isCheckpointed)
<SEP>
    val rightImpurityCalculator: ImpurityCalculator,
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
class JavaRDD[T](val rdd: RDD[T])(implicit val classTag: ClassTag[T])
<SEP>
    val recordsWritten: Long)
<SEP>
    @Since("1.2.0") @BeanProperty var numClasses: Int = 2,
<SEP>
  val Continuous, Categorical = Value
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
  extends TreeEnsembleModel(algo, trees, Array.fill(trees.length)(1.0),
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
  def unpersist(blocking: Boolean = true): this.type = {
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    preservesPartitioning: Boolean = false,
<SEP>
    val executorCpuTime: Long,
<SEP>
  val Average, Sum, Vote = Value
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
    trainClassifier(input.rdd, numClasses,
<SEP>
    val bytesRead: Long,
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    val hostPort: String,
<SEP>
      if (!doCheckpointCalled) {
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
    val bytesWritten: Long,
<SEP>
  def numTrees: Int = trees.length
<SEP>
  def context: SparkContext = sc
<SEP>
    dependencies.head.rdd.asInstanceOf[RDD[U]]
<SEP>
    val scopeKey = SparkContext.RDD_SCOPE_KEY
     val noOverrideKey = SparkContext.RDD_SCOPE_NO_OVERRIDE_KEY
     val oldScopeJson = sc.getLocalProperty(scopeKey)
     val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
     val oldNoOverride = sc.getLocalProperty(noOverrideKey)
     try {
       if (ignoreParent) {
         // Ignore all parent settings and scopes and start afresh with our own root scope
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name).toJson)
       } else if (sc.getLocalProperty(noOverrideKey) == null) {
         // Otherwise, set the scope only if the higher level caller allows us to do so
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name, oldScope).toJson)
       }
       // Optionally disallow the child body to override our scope
       if (!allowNesting) {
         sc.setLocalProperty(noOverrideKey, "true")
       }
       body
     } finally {
       // Remember to restore any state that was modified before exiting
       sc.setLocalProperty(scopeKey, oldScopeJson)
       sc.setLocalProperty(noOverrideKey, oldNoOverride)
<SEP>
  def numTrees: Int = trees.length
<SEP>
  private val stateLock = new Integer(0)
<SEP>
    val name: String,
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
  @transient var name: String = _
<SEP>
    val strategy = new Strategy(algo, impurity, maxDepth, numClasses, maxBins,
       quantileCalculationStrategy, categoricalFeaturesInfo)
     new DecisionTree(strategy).run(input)
<SEP>
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    if (isCheckpointedAndMaterialized) {
<SEP>
    logInfo("Removing RDD " + id + " from persistence list")
     sc.unpersistRDD(id, blocking)
     storageLevel = StorageLevel.NONE
     this
<SEP>
private[spark] abstract class ImpurityCalculator(val stats: Array[Double]) extends Serializable {
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val executors: Seq[String])
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
    Option(sc.getLocalProperty(SparkContext.RDD_SCOPE_KEY)).map(RDDOperationScope.fromJson)
<SEP>
trait JavaRDDLike[T, This <: JavaRDDLike[T, This]] extends Serializable {
<SEP>
    val valid: Boolean = true) extends Serializable {
<SEP>
    data.foreach { pair => map.put(pair._1, pair._2) }
<SEP>
class JavaPairRDD[K, V](val rdd: RDD[(K, V)])
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
    val impurityType = Impurities.fromString(impurity)
     train(input, Classification, impurityType, maxDepth, numClasses, maxBins, Sort,
<SEP>
      allowNesting: Boolean = false)(body: => T): T = {
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
      .map(_.getMethodName)
<SEP>
    val results = sc.runJob(this, (iter: Iterator[T]) => iter.toArray)
     Array.concat(results: _*)
<SEP>
  def collectAsMap(): Map[K, V] = self.withScope {
<SEP>
    new ImpurityStats(Double.MinValue, impurityCalculator.calculate(),
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
  def filter(f: T => Boolean): RDD[T] = withScope {
<SEP>
    val resultSerializationTime: Long,
<SEP>
    val impurity: Double,
<SEP>
    new JavaPairRDD(rdd.map[(K2, V2)](f)(cm))(fakeClassTag[K2], fakeClassTag[V2])
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
<SEP>
          dependencies.foreach(_.rdd.doCheckpoint())
<SEP>
      .dropWhile(_.getMethodName != ourMethodName)
<SEP>
  def sparkContext: SparkContext = sc
<SEP>
  def initialize(): Unit = inputBlock.get()
<SEP>
    val leftImpurityCalculator: ImpurityCalculator,
<SEP>
    val hsplit = split.asInstanceOf[HadoopPartition].inputSplit.value
     val locs = hsplit match {
       case lsplit: InputSplitWithLocationInfo =>
         HadoopRDD.convertSplitLocationInfo(lsplit.getLocationInfo)
       case _ => None
     }
     locs.getOrElse(hsplit.getLocations.filter(_ != "localhost"))
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  def nextScopeId(): Int = scopeCounter.getAndIncrement
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
private[spark] abstract class AbstractJavaRDDLike[T, This <: JavaRDDLike[T, This]]
<SEP>
    val executorDeserializeTime: Long,
<SEP>
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    new RandomForestModel(strategy.algo, trees.map(_.toOld))
<SEP>
    val result = array.foldLeft((-1, Double.MinValue, 0)) {
       case ((maxIndex, maxValue, currentIndex), currentValue) =>
         if (currentValue > maxValue) {
           (currentIndex, currentValue, currentIndex + 1)
         } else {
           (maxIndex, maxValue, currentIndex + 1)
         }
     }
     if (result._1 < 0) {
       throw new RuntimeException("ImpurityCalculator internal error:" +
         " indexOfLargestArrayElement failed")
     }
     result._1
<SEP>
<SEP>
private[spark] class GiniAggregator(numClasses: Int)
<SEP>
    val impurityCalculator: ImpurityCalculator,
<SEP>
    jsonMapper.readValue(s, classOf[RDDOperationScope])
<SEP>
  val Classification, Regression = Value
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String,
<SEP>
    val id: Int,
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
class Node @Since("1.2.0") (
<SEP>
    val results = sc.runJob(this, (iter: Iterator[T]) => iter.toArray)
<SEP>
    isOrderSensitive: Boolean = false)
<SEP>
    val bytesWritten: Long,
<SEP>
    protected val trees: Array[DecisionTreeModel],
<SEP>
                       (implicit val kClassTag: ClassTag[K], implicit val vClassTag: ClassTag[V])
<SEP>
    val resultSize: Long,
<SEP>
    @Since("1.2.0") override val algo: Algo,
<SEP>
    val localBlocksFetched: Long,
<SEP>
  def rightImpurity: Double = if (rightImpurityCalculator != null) {
<SEP>
      .find(_.getMethodName != ourMethodName)
<SEP>
  val id: Int = sc.newRddId()
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
    val writeTime: Long,
<SEP>
    val peakExecutionMemory: Long,
<SEP>
    isFromBarrier: Boolean = false,
<SEP>
  def fakeClassTag[T]: ClassTag[T] = ClassTag.AnyRef.asInstanceOf[ClassTag[T]]
<SEP>
    new ImpurityStats(Double.NaN, impurityCalculator.calculate(), impurityCalculator, null, null)
<SEP>
    val stageId: Int,
<SEP>
  private[spark] def elementClassTag: ClassTag[T] = classTag[T]
<SEP>
  def count: Long = stats.sum.toLong
<SEP>
            partitions_.zipWithIndex.foreach { case (partition, index) =>
<SEP>
  private[spark] def withScope[U](body: => U): U = RDDOperationScope.withScope[U](sc)(body)
<SEP>
  val inputSplit = new SerializableWritable[InputSplit](s)
<SEP>
    val recordsRead: Long)
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
    Option(infos).map(_.flatMap { loc =>
<SEP>
    @Since("1.2.0") override val trees: Array[DecisionTreeModel])
<SEP>
    val rf = new RandomForest(strategy, numTrees = 1, featureSubsetStrategy = "all", seed = seed)
     val rfModel = rf.run(input)
     rfModel.trees(0)
<SEP>
                       (implicit val kClassTag: ClassTag[K], implicit val vClassTag: ClassTag[V])
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
      getPreferredLocations(split)
<SEP>
    @Since("1.0.0") @BeanProperty var algo: Algo,
<SEP>
    new JavaPairRDD[K, V](rdd.filter(x => f.call(x).booleanValue()))
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
private[spark] class HadoopPartition(rddId: Int, override val index: Int, s: InputSplit)
<SEP>
    protected val algo: Algo,
<SEP>
  def leftImpurity: Double = if (leftImpurityCalculator != null) {
<SEP>
  def collect(): Array[T] = withScope {
<SEP>
    if (storageLevel != StorageLevel.NONE) {
<SEP>
  def filter(f: T => Boolean): RDD[T] = withScope {
<SEP>
class JavaPairRDD[K, V](val rdd: RDD[(K, V)])
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
  def leftChildIndex(nodeIndex: Int): Int = nodeIndex << 1
<SEP>
    val result = array.foldLeft((-1, Double.MinValue, 0)) {
<SEP>
    @Since("1.2.0") @BeanProperty var numClasses: Int = 2,
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
  override def getPartitions: Array[Partition] = firstParent[T].partitions
<SEP>
    val remoteBytesRead: Long,
<SEP>
  def unset(): Unit = inputBlock.remove()
<SEP>
    val executorRunTime: Long,
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
  override val index: Int = idx
<SEP>
    val valid: Boolean = true) extends Serializable {
<SEP>
    val trees: Array[NewDTModel] = NewRandomForest.run(input.map(_.asML), strategy, numTrees,
       featureSubsetStrategy, seed.toLong, None)
     new RandomForestModel(strategy.algo, trees.map(_.toOld))
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    val gain: Double,
<SEP>
    val fetchWaitTime: Long,
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
  def rightChildIndex(nodeIndex: Int): Int = (nodeIndex << 1) + 1
<SEP>
    val recordsWritten: Long)
<SEP>
    val diskBytesSpilled: Long,
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
    if (totalCount == 0) {
       return 0
     }
     val numClasses = counts.length
     var impurity = 1.0
     var classIndex = 0
     while (classIndex < numClasses) {
       val freq = counts(classIndex) / totalCount
       impurity -= freq * freq
       classIndex += 1
     }
     impurity
<SEP>
    val ourMethodName = "withScope"
     val callerMethodName = Thread.currentThread.getStackTrace()
       .dropWhile(_.getMethodName != ourMethodName)
       .find(_.getMethodName != ourMethodName)
       .map(_.getMethodName)
       .getOrElse {
         // Log a warning just in case, but this should almost certainly never happen
         logWarning("No valid method name for this RDD operation scope!")
         "N/A"
       }
     withScope[T](sc, callerMethodName, allowNesting, ignoreParent = false)(body)
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
  def predict: Double = if (count == 0) {
<SEP>
    val localBytesRead: Long,
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  def collect(): Array[T] = withScope {
<SEP>
    val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
<SEP>
      if (!doCheckpointCalled) {
<SEP>
    require(stats.length == other.stats.length,
       s"Two ImpurityCalculator instances cannot be subtracted with different counts sizes." +
       s"  Sizes are ${stats.length} and ${other.stats.length}.")
     var i = 0
     val len = other.stats.length
     while (i < len) {
       stats(i) -= other.stats(i)
       i += 1
     }
     this
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
  require(trees.forall(_.algo == algo))
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
    @Since("1.0.0") val algo: Algo) extends Serializable with Saveable {
<SEP>
  def calculate(): Double = Gini.calculate(stats, stats.sum)
<SEP>
<SEP>
    Option(infos).map(_.flatMap { loc =>
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val jobId: Int,
<SEP>
<SEP>
    val jvmGcTime: Long,
<SEP>
<SEP>
  protected def getDependencies: Seq[Dependency[_]] = deps
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
<SEP>
