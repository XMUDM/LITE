    val bytesWritten: Long,
<SEP>
    RDDOperationScope.withScope(sc, "checkpoint", allowNesting = false, ignoreParent = true) {
<SEP>
    val resultSize: Long,
<SEP>
  def unapply(dv: DenseVector): Option[Array[Double]] = Some(dv.values)
<SEP>
      precision: Double = 1e-6): Double = {
<SEP>
  def collectAsMap(): Map[K, V] = self.withScope {
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
  private[spark] override def isBarrier(): Boolean = false
<SEP>
    val localBlocksFetched: Long,
<SEP>
    if (_sc == null) {
       throw new SparkException(
         "This RDD lacks a SparkContext. It could happen in the following cases: \n(1) RDD " +
         "transformations and actions are NOT invoked by the driver, but inside of other " +
         "transformations; for example, rdd1.map(x => rdd2.values.count() * x) is invalid " +
         "because the values transformation and count action cannot be performed inside of the " +
         "rdd1.map transformation. For more information, see SPARK-5063.\n(2) When a Spark " +
         "Streaming job recovers from checkpoint, this exception will be hit if a reference to " +
         "an RDD not defined by the streaming job is used in DStream operations. For more " +
         "information, See SPARK-13758.")
     }
     _sc
<SEP>
      .find(_.getMethodName != ourMethodName)
<SEP>
    new PairRDDFunctions(rdd)
<SEP>
  val id: Int = sc.newRddId()
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
    val recordsRead: Long)
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
    val writeTime: Long,
<SEP>
    val peakExecutionMemory: Long,
<SEP>
    isFromBarrier: Boolean = false,
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val attemptId: Int,
<SEP>
  private[spark] val CHECKPOINT_ALL_MARKED_ANCESTORS =
<SEP>
    val stageId: Int,
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
  private[spark] def elementClassTag: ClassTag[T] = classTag[T]
<SEP>
private[clustering] class VectorWithNorm(val vector: Vector, val norm: Double)
<SEP>
            partitions_.zipWithIndex.foreach { case (partition, index) =>
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
  private[spark] def withScope[U](body: => U): U = RDDOperationScope.withScope[U](sc)(body)
<SEP>
class KMeansModel (@Since("1.0.0") val clusterCenters: Array[Vector],
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
  override def size: Int = values.length
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
    val recordsRead: Long)
<SEP>
    val recordsWritten: Long)
<SEP>
class KMeans private (
<SEP>
trait PMMLExportable {
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
      val newCenters = collected.mapValues { case (sum, count) =>
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
      getPreferredLocations(split)
<SEP>
  def unpersist(blocking: Boolean = true): this.type = {
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    preservesPartitioning: Boolean = false,
<SEP>
    val executorCpuTime: Long,
<SEP>
    new KMeans().setK(k)
       .setMaxIterations(maxIterations)
       .setInitializationMode(initializationMode)
       .setSeed(seed)
       .run(data)
<SEP>
    private var epsilon: Double,
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
private[spark] class HadoopPartition(rddId: Int, override val index: Int, s: InputSplit)
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
    val bytesRead: Long,
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    val hostPort: String,
<SEP>
  def collect(): Array[T] = withScope {
<SEP>
  val EUCLIDEAN = "euclidean"
<SEP>
class PairRDDFunctions[K, V](self: RDD[(K, V)])
<SEP>
      if (!doCheckpointCalled) {
<SEP>
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
    if (storageLevel != StorageLevel.NONE) {
<SEP>
    val bytesWritten: Long,
<SEP>
private[clustering] class VectorWithNorm(val vector: Vector, val norm: Double)
<SEP>
    EuclideanDistanceMeasure.fastSquaredDistance(newCenter, oldCenter) <= epsilon * epsilon
<SEP>
  def context: SparkContext = sc
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
    dependencies.head.rdd.asInstanceOf[RDD[U]]
<SEP>
    val scopeKey = SparkContext.RDD_SCOPE_KEY
     val noOverrideKey = SparkContext.RDD_SCOPE_NO_OVERRIDE_KEY
     val oldScopeJson = sc.getLocalProperty(scopeKey)
     val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
     val oldNoOverride = sc.getLocalProperty(noOverrideKey)
     try {
       if (ignoreParent) {
         // Ignore all parent settings and scopes and start afresh with our own root scope
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name).toJson)
       } else if (sc.getLocalProperty(noOverrideKey) == null) {
         // Otherwise, set the scope only if the higher level caller allows us to do so
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name, oldScope).toJson)
       }
       // Optionally disallow the child body to override our scope
       if (!allowNesting) {
         sc.setLocalProperty(noOverrideKey, "true")
       }
       body
     } finally {
       // Remember to restore any state that was modified before exiting
       sc.setLocalProperty(scopeKey, oldScopeJson)
       sc.setLocalProperty(noOverrideKey, oldNoOverride)
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
  private val stateLock = new Integer(0)
<SEP>
  override def getPartitions: Array[Partition] = firstParent[T].partitions
<SEP>
    val remoteBytesRead: Long,
<SEP>
      }.reduceByKey { case ((sum1, count1), (sum2, count2)) =>
<SEP>
  def unset(): Unit = inputBlock.remove()
<SEP>
    val jobID = new JobID(jobTrackerId, jobId)
     val taId = new TaskAttemptID(new TaskID(jobID, TaskType.MAP, splitId), attemptId)
 
     conf.set("mapreduce.task.id", taId.getTaskID.toString)
     conf.set("mapreduce.task.attempt.id", taId.toString)
     conf.setBoolean("mapreduce.task.ismap", true)
     conf.setInt("mapreduce.task.partition", splitId)
     conf.set("mapreduce.job.id", jobID.toString)
<SEP>
    val name: String,
<SEP>
    val executorRunTime: Long,
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
  @transient var name: String = _
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
  private[spark] def valueClass: Class[_] = vt.runtimeClass
<SEP>
  override val index: Int = idx
<SEP>
    require(p >= 1.0, "To compute the p-norm of the vector, we require that you specify a p>=1. " +
       s"You specified p=$p.")
     val values = vector match {
       case DenseVector(vs) => vs
       case SparseVector(n, ids, vs) => vs
       case v => throw new IllegalArgumentException("Do not support vector type " + v.getClass)
<SEP>
      codec: Option[Class[_ <: CompressionCodec]] = None): Unit = self.withScope {
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    if (isCheckpointedAndMaterialized) {
<SEP>
    logInfo("Removing RDD " + id + " from persistence list")
     sc.unpersistRDD(id, blocking)
     storageLevel = StorageLevel.NONE
     this
<SEP>
    require(x.size == y.size,
       "BLAS.dot(x: Vector, y:Vector) was given Vectors with non-matching sizes:" +
       " x.size = " + x.size + ", y.size = " + y.size)
     (x, y) match {
       case (dx: DenseVector, dy: DenseVector) =>
         dot(dx, dy)
       case (sx: SparseVector, dy: DenseVector) =>
         dot(sx, dy)
       case (dx: DenseVector, sy: SparseVector) =>
         dot(sy, dx)
       case (sx: SparseVector, sy: SparseVector) =>
         dot(sx, sy)
       case _ =>
         throw new IllegalArgumentException(s"dot doesn't support (${x.getClass}, ${y.getClass}).")
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val executors: Seq[String])
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
  private[spark] def conf = sc.conf
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    Option(sc.getLocalProperty(SparkContext.RDD_SCOPE_KEY)).map(RDDOperationScope.fromJson)
<SEP>
    data.foreach { pair => map.put(pair._1, pair._2) }
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
      allowNesting: Boolean = false)(body: => T): T = {
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
  private[mllib] lazy val EPSILON = {
<SEP>
      .map(_.getMethodName)
<SEP>
  private[spark] def keyClass: Class[_] = kt.runtimeClass
<SEP>
    val fetchWaitTime: Long,
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val results = sc.runJob(this, (iter: Iterator[T]) => iter.toArray)
     Array.concat(results: _*)
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
class KMeans private (
<SEP>
    if (data.getStorageLevel == StorageLevel.NONE) {
       logWarning("The input data is not directly cached, which may hurt performance if its"
         + " parent RDDs are also uncached.")
     }
 
     // Compute squared norms and cache them.
     val norms = data.map(Vectors.norm(_, 2.0))
     norms.persist()
     val zippedData = data.zip(norms).map { case (v, norm) =>
       new VectorWithNorm(v, norm)
     }
     val model = runAlgorithm(zippedData, instr)
     norms.unpersist()
 
     // Warn at the end of the run as well, for increased visibility.
     if (data.getStorageLevel == StorageLevel.NONE) {
       logWarning("The input data was not directly cached, which may hurt performance if its"
         + " parent RDDs are also uncached.")
     }
     model
<SEP>
  def collectAsMap(): Map[K, V] = self.withScope {
<SEP>
      conf: JobConf = new JobConf(self.context.hadoopConfiguration),
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    @Since("1.0.0") val values: Array[Double]) extends Vector {
<SEP>
    MLUtils.fastSquaredDistance(v1.vector, v1.norm, v2.vector, v2.norm)
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    scal(1.0 / count, sum)
     new VectorWithNorm(sum)
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
    new KMeansModel(centers.map(_.vector), distanceMeasure, cost, iteration)
<SEP>
    val recordsWritten: Long)
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val diskBytesSpilled: Long,
<SEP>
class KMeans private (
<SEP>
    if (_f2jBLAS == null) {
       _f2jBLAS = new F2jBLAS
     }
     _f2jBLAS
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
    require(x.size == y.size)
     y match {
       case dy: DenseVector =>
         x match {
           case sx: SparseVector =>
             axpy(a, sx, dy)
           case dx: DenseVector =>
             axpy(a, dx, dy)
           case _ =>
             throw new UnsupportedOperationException(
               s"axpy doesn't support x type ${x.getClass}.")
         }
       case _ =>
         throw new IllegalArgumentException(
<SEP>
      newCenters.foreach { case (j, newCenter) =>
<SEP>
    val resultSerializationTime: Long,
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
          dependencies.foreach(_.rdd.doCheckpoint())
<SEP>
      .dropWhile(_.getMethodName != ourMethodName)
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    new InheritableThreadLocal[AtomicReference[FileBlock]] {
<SEP>
    val n = v1.size
     require(v2.size == n)
     require(norm1 >= 0.0 && norm2 >= 0.0)
     val sumSquaredNorm = norm1 * norm1 + norm2 * norm2
     val normDiff = norm1 - norm2
     var sqDist = 0.0
     /*
      * The relative error is
      * <pre>
      * EPSILON * ( \|a\|_2^2 + \|b\\_2^2 + 2 |a^T b|) / ( \|a - b\|_2^2 ),
      * </pre>
      * which is bounded by
      * <pre>
      * 2.0 * EPSILON * ( \|a\|_2^2 + \|b\|_2^2 ) / ( (\|a\|_2 - \|b\|_2)^2 ).
      * </pre>
      * The bound doesn't need the inner product, so we can use it as a sufficient condition to
      * check quickly whether the inner product approach is accurate.
      */
     val precisionBound1 = 2.0 * EPSILON * sumSquaredNorm / (normDiff * normDiff + EPSILON)
     if (precisionBound1 < precision) {
       sqDist = sumSquaredNorm - 2.0 * dot(v1, v2)
     } else if (v1.isInstanceOf[SparseVector] || v2.isInstanceOf[SparseVector]) {
       val dotValue = dot(v1, v2)
       sqDist = math.max(sumSquaredNorm - 2.0 * dotValue, 0.0)
       val precisionBound2 = EPSILON * (sumSquaredNorm + 2.0 * math.abs(dotValue)) /
         (sqDist + EPSILON)
       if (precisionBound2 > precision) {
         sqDist = Vectors.sqdist(v1, v2)
       }
     } else {
       sqDist = Vectors.sqdist(v1, v2)
     }
     sqDist
<SEP>
  def sparkContext: SparkContext = sc
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
    val ourMethodName = "withScope"
     val callerMethodName = Thread.currentThread.getStackTrace()
       .dropWhile(_.getMethodName != ourMethodName)
       .find(_.getMethodName != ourMethodName)
       .map(_.getMethodName)
       .getOrElse {
         // Log a warning just in case, but this should almost certainly never happen
         logWarning("No valid method name for this RDD operation scope!")
         "N/A"
       }
     withScope[T](sc, callerMethodName, allowNesting, ignoreParent = false)(body)
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  def nextScopeId(): Int = scopeCounter.getAndIncrement
<SEP>
    private var maxIterations: Int,
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    val localBytesRead: Long,
<SEP>
  def collect(): Array[T] = withScope {
<SEP>
    val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
<SEP>
      if (!doCheckpointCalled) {
<SEP>
    run(data, None)
<SEP>
    val executorDeserializeTime: Long,
<SEP>
<SEP>
  override def toString: String = values.mkString("[", ",", "]")
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
    jsonMapper.readValue(s, classOf[RDDOperationScope])
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    if (clusterCenters == null) null else clusterCenters.map(new VectorWithNorm(_))
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val jobId: Int,
<SEP>
    val id: String,
<SEP>
<SEP>
    x match {
       case sx: SparseVector =>
         f2jBLAS.dscal(sx.values.length, a, sx.values, 1)
       case dx: DenseVector =>
         f2jBLAS.dscal(dx.values.length, a, dx.values, 1)
       case _ =>
         throw new IllegalArgumentException(s"scal doesn't support vector type ${x.getClass}.")
<SEP>
    distanceMeasure match {
       case EUCLIDEAN => new EuclideanDistanceMeasure
       case COSINE => new CosineDistanceMeasure
       case _ => throw new IllegalArgumentException(s"distanceMeasure must be one of: " +
<SEP>
    val jvmGcTime: Long,
<SEP>
<SEP>
    val id: Int,
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
    val results = sc.runJob(this, (iter: Iterator[T]) => iter.toArray)
<SEP>
    isOrderSensitive: Boolean = false)
<SEP>
  protected def getDependencies: Seq[Dependency[_]] = deps
<SEP>
    val dep = dependencies.head.asInstanceOf[ShuffleDependency[K, V, C]]
     SparkEnv.get.shuffleManager.getReader(dep.shuffleHandle, split.index, split.index + 1, context)
       .read()
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
