    val bytesWritten: Long,
<SEP>
          (i, iter) => iter.map((i % curNumPartitions, _))
<SEP>
      currMin = Array.fill[Double](n)(Double.MaxValue)
<SEP>
<SEP>
    @Since("1.0.0") features: Vector) {
<SEP>
    val resultSize: Long,
<SEP>
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    val localBlocksFetched: Long,
<SEP>
  protected val jobConfCacheKey: String = "rdd_%d_job_conf".format(id)
<SEP>
  val id: Int = sc.newRddId()
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
    val recordsRead: Long)
<SEP>
      (aggregator1, aggregator2) => aggregator1.merge(aggregator2))
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
    val writeTime: Long,
<SEP>
    val peakExecutionMemory: Long,
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val attemptId: Int,
<SEP>
    val stageId: Int,
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
  private[spark] def elementClassTag: ClassTag[T] = classTag[T]
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
        getBytesReadCallback.foreach { getBytesRead =>
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
    checkpointData.exists(_.isCheckpointed)
<SEP>
        if (reader != null) {
<SEP>
        getBytesReadCallback.foreach { getBytesRead =>
<SEP>
  def add(sample: Vector): this.type = add(sample, 1.0)
<SEP>
  override def size: Int = values.length
<SEP>
  val inputSplit = new SerializableWritable[InputSplit](s)
<SEP>
    val recordsRead: Long)
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
    val recordsWritten: Long)
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
sealed trait Vector extends Serializable {
<SEP>
        (it: Iterator[T]) => it.aggregate(zeroValue)(cleanSeqOp, cleanCombOp)
<SEP>
    lazy val cachedSerializer = SparkEnv.get.serializer.newInstance()
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    require(weight >= 0.0, s"sample weight, ${weight} has to be >= 0.0")
     if (weight == 0.0) return this
 
     if (n == 0) {
       require(instance.size > 0, s"Vector should have dimension larger than zero.")
       n = instance.size
 
       currMean = Array.ofDim[Double](n)
       currM2n = Array.ofDim[Double](n)
       currM2 = Array.ofDim[Double](n)
       currL1 = Array.ofDim[Double](n)
       weightSum = Array.ofDim[Double](n)
       nnz = Array.ofDim[Long](n)
       currMax = Array.fill[Double](n)(Double.MinValue)
       currMin = Array.fill[Double](n)(Double.MaxValue)
     }
 
     require(n == instance.size, s"Dimensions mismatch when adding new sample." +
       s" Expecting $n but got ${instance.size}.")
 
     val localCurrMean = currMean
     val localCurrM2n = currM2n
     val localCurrM2 = currM2
     val localCurrL1 = currL1
     val localWeightSum = weightSum
     val localNumNonzeros = nnz
     val localCurrMax = currMax
     val localCurrMin = currMin
     instance.foreachActive { (index, value) =>
       if (value != 0.0) {
         if (localCurrMax(index) < value) {
           localCurrMax(index) = value
         }
         if (localCurrMin(index) > value) {
           localCurrMin(index) = value
         }
 
         val prevMean = localCurrMean(index)
         val diff = value - prevMean
         localCurrMean(index) = prevMean + weight * diff / (localWeightSum(index) + weight)
         localCurrM2n(index) += weight * (value - localCurrMean(index)) * diff
         localCurrM2(index) += weight * value * value
         localCurrL1(index) += weight * math.abs(value)
 
         localWeightSum(index) += weight
         localNumNonzeros(index) += 1
       }
     }
 
     totalWeightSum += weight
     weightSquareSum += weight * weight
     totalCnt += 1
     this
<SEP>
      getPreferredLocations(split)
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
<SEP>
    val executorCpuTime: Long,
<SEP>
    combineByKeyWithClassTag[V]((v: V) => cleanedFunc(createZero(), v),
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
private[spark] class HadoopPartition(rddId: Int, override val index: Int, s: InputSplit)
<SEP>
    any match {
       case values: Array[Double] =>
         Vectors.dense(values)
       case Seq(size: Double, indices: Array[Double], values: Array[Double]) =>
         Vectors.sparse(size.toInt, indices.map(_.toInt), values)
       case other =>
         throw new SparkException(s"Cannot parse $other.")
<SEP>
    val bytesRead: Long,
<SEP>
    if (s.startsWith("(")) {
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    val hostPort: String,
<SEP>
<SEP>
    val blockId = RDDBlockId(id, partition.index)
     var readCachedBlock = true
     // This method is called on executors, so we need call SparkEnv.get instead of sc.env.
     SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
        updateBytesRead()
         closeIfNeeded()
<SEP>
<SEP>
    if (storageLevel != StorageLevel.NONE) {
<SEP>
    val bytesWritten: Long,
<SEP>
<SEP>
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
    dependencies.head.rdd.asInstanceOf[RDD[U]]
<SEP>
  private var n = 0
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val remoteBytesRead: Long,
<SEP>
      (aggregator, data) => aggregator.add(data),
<SEP>
  def unset(): Unit = inputBlock.remove()
<SEP>
        (it: Iterator[T]) => it.aggregate(zeroValue)(cleanSeqOp, cleanCombOp)
<SEP>
    val jobID = new JobID(jobTrackerId, jobId)
     val taId = new TaskAttemptID(new TaskID(jobID, TaskType.MAP, splitId), attemptId)
 
     conf.set("mapreduce.task.id", taId.getTaskID.toString)
     conf.set("mapreduce.task.attempt.id", taId.toString)
     conf.setBoolean("mapreduce.task.ismap", true)
     conf.setInt("mapreduce.task.partition", splitId)
     conf.set("mapreduce.job.id", jobID.toString)
<SEP>
    val name: String,
<SEP>
    val executorRunTime: Long,
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
<SEP>
<SEP>
          inputMetrics.setBytesRead(existingBytesRead + getBytesRead())
<SEP>
    if (this.totalWeightSum != 0.0 && other.totalWeightSum != 0.0) {
       require(n == other.n, s"Dimensions mismatch when merging with another summarizer. " +
         s"Expecting $n but got ${other.n}.")
       totalCnt += other.totalCnt
       totalWeightSum += other.totalWeightSum
       weightSquareSum += other.weightSquareSum
       var i = 0
       while (i < n) {
         val thisNnz = weightSum(i)
         val otherNnz = other.weightSum(i)
         val totalNnz = thisNnz + otherNnz
         val totalCnnz = nnz(i) + other.nnz(i)
         if (totalNnz != 0.0) {
           val deltaMean = other.currMean(i) - currMean(i)
           // merge mean together
           currMean(i) += deltaMean * otherNnz / totalNnz
           // merge m2n together
           currM2n(i) += other.currM2n(i) + deltaMean * deltaMean * thisNnz * otherNnz / totalNnz
           // merge m2 together
           currM2(i) += other.currM2(i)
           // merge l1 together
           currL1(i) += other.currL1(i)
           // merge max and min
           currMax(i) = math.max(currMax(i), other.currMax(i))
           currMin(i) = math.min(currMin(i), other.currMin(i))
         }
         weightSum(i) = totalNnz
         nnz(i) = totalCnnz
         i += 1
       }
     } else if (totalWeightSum == 0.0 && other.totalWeightSum != 0.0) {
       this.n = other.n
       this.currMean = other.currMean.clone()
       this.currM2n = other.currM2n.clone()
       this.currM2 = other.currM2.clone()
       this.currL1 = other.currL1.clone()
       this.totalCnt = other.totalCnt
       this.totalWeightSum = other.totalWeightSum
       this.weightSquareSum = other.weightSquareSum
       this.weightSum = other.weightSum.clone()
       this.nnz = other.nnz.clone()
       this.currMax = other.currMax.clone()
       this.currMin = other.currMin.clone()
     }
     this
<SEP>
  @transient var name: String = _
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
  override val index: Int = idx
<SEP>
          .map { conf =>
<SEP>
    val iter = new NextIterator[(K, V)] {
<SEP>
      (context: TaskContext, index: Int, iter: Iterator[T]) => cleanedF(index, iter),
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    if (isCheckpointedAndMaterialized) {
<SEP>
      private val existingBytesRead = inputMetrics.bytesRead
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val executors: Seq[String])
<SEP>
      logInfo("Input split: " + split.inputSplit)
<SEP>
      private val inputMetrics = context.taskMetrics().inputMetrics
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
<SEP>
          (i, iter) => iter.map((i % curNumPartitions, _))
<SEP>
    val diskUsed: Long,
<SEP>
      if (value != 0.0) {
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    val tokenizer = new StringTokenizer(s, "()[],", true)
     if (tokenizer.hasMoreTokens()) {
       val token = tokenizer.nextToken()
       if (token == "(") {
         parseTuple(tokenizer)
       } else if (token == "[") {
         parseArray(tokenizer)
       } else {
         // expecting a number
         parseDouble(token)
       }
     } else {
       throw new SparkException(s"Cannot find any token from the input string.")
<SEP>
    val fetchWaitTime: Long,
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
      (context: TaskContext, index: Int, iter: Iterator[T]) => cleanedF(iter),
<SEP>
    val conf: Configuration = broadcastedConf.value.value
     if (shouldCloneJobConf) {
       // Hadoop Configuration objects are not thread-safe, which may lead to various problems if
       // one job modifies a configuration while another reads it (SPARK-2546).  This problem occurs
       // somewhat rarely because most jobs treat the configuration as though it's immutable.  One
       // solution, implemented here, is to clone the Configuration object.  Unfortunately, this
       // clone can be very expensive.  To avoid unexpected performance regressions for workloads and
       // Hadoop versions that do not suffer from these thread-safety issues, this cloning is
       // disabled by default.
       HadoopRDD.CONFIGURATION_INSTANTIATION_LOCK.synchronized {
<SEP>
    new MapPartitionsRDD[U, T](this, (context, pid, iter) => iter.map(cleanF))
<SEP>
    @Since("1.0.0") val values: Array[Double]) extends Vector {
<SEP>
    val tracker = SparkEnv.get.mapOutputTracker.asInstanceOf[MapOutputTrackerMaster]
     val dep = dependencies.head.asInstanceOf[ShuffleDependency[K, V, C]]
     tracker.getPreferredLocationsForShuffle(dep, partition.index)
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    val memoryUsed: Long,
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
        (it: Iterator[T]) => it.aggregate(zeroValue)(cleanSeqOp, cleanCombOp)
<SEP>
    val recordsWritten: Long)
<SEP>
      partitioner: Partitioner)(func: (V, V) => V): RDD[(K, V)] = self.withScope {
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val diskBytesSpilled: Long,
<SEP>
    val resultSerializationTime: Long,
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
    sc.textFile(path, minPartitions).map(LabeledPoint.parse)
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    new InheritableThreadLocal[AtomicReference[FileBlock]] {
<SEP>
  def sparkContext: SparkContext = sc
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
  def initialize(): Unit = inputBlock.get()
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    val localBytesRead: Long,
<SEP>
  def getCachedMetadata(key: String): Any = SparkEnv.get.hadoopJobMetadata.get(key)
<SEP>
    val newInputFormat = ReflectionUtils.newInstance(inputFormatClass.asInstanceOf[Class[_]], conf)
       .asInstanceOf[InputFormat[K, V]]
     newInputFormat match {
       case c: Configurable => c.setConf(conf)
       case _ =>
     }
     newInputFormat
<SEP>
      currMin = Array.fill[Double](n)(Double.MaxValue)
<SEP>
      context.addTaskCompletionListener[Unit] { context =>
<SEP>
    f(context, split.index, firstParent[T].iterator(split, context))
<SEP>
    val executorDeserializeTime: Long,
<SEP>
<SEP>
    val createZero = () => cachedSerializer.deserialize[V](ByteBuffer.wrap(zeroArray))
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
  private val createTime = new Date()
<SEP>
      currMax = Array.fill[Double](n)(Double.MinValue)
<SEP>
<SEP>
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
<SEP>
      var partiallyAggregated: RDD[U] = mapPartitions(it => Iterator(aggregatePartition(it)))
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
      private val split = theSplit.asInstanceOf[HadoopPartition]
<SEP>
    require(filePath != null, "filePath cannot be null")
     require(startOffset >= 0, s"startOffset ($startOffset) cannot be negative")
     require(length >= -1, s"length ($length) cannot be smaller than -1")
     inputBlock.get().set(new FileBlock(UTF8String.fromString(filePath), startOffset, length))
<SEP>
class HadoopRDD[K, V](
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
              existingMetrics.incRecordsRead(1)
               delegate.next()
<SEP>
    val jobId: Int,
<SEP>
    val id: String,
<SEP>
    SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
<SEP>
      currMax = Array.fill[Double](n)(Double.MinValue)
<SEP>
  def dense(values: Array[Double]): Vector = new DenseVector(values)
<SEP>
    val jvmGcTime: Long,
<SEP>
    val id: Int,
<SEP>
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
