    val bytesWritten: Long,
<SEP>
  def unset(): Unit = inputBlock.remove()
<SEP>
    val resultSize: Long,
<SEP>
    val name: String,
<SEP>
    val executorRunTime: Long,
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
  override val index: Int = idx
<SEP>
    if (isCheckpointedAndMaterialized) {
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    val localBlocksFetched: Long,
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
    if (label >= statsSize) {
       throw new IllegalArgumentException(s"GiniAggregator given label $label" +
         s" but requires label < numClasses (= $statsSize).")
     }
     if (label < 0) {
       throw new IllegalArgumentException(s"GiniAggregator given label $label" +
         s"but requires label is non-negative.")
     }
     allStats(offset + label.toInt) += instanceWeight
<SEP>
  val id: Int = sc.newRddId()
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
    val recordsRead: Long)
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
    val writeTime: Long,
<SEP>
    val peakExecutionMemory: Long,
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
    val attemptId: Int,
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    val fetchWaitTime: Long,
<SEP>
private[spark] abstract class ImpurityAggregator(val statsSize: Int) extends Serializable {
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
      (context: TaskContext, index: Int, iter: Iterator[T]) => cleanedF(iter),
<SEP>
    val tracker = SparkEnv.get.mapOutputTracker.asInstanceOf[MapOutputTrackerMaster]
     val dep = dependencies.head.asInstanceOf[ShuffleDependency[K, V, C]]
     tracker.getPreferredLocationsForShuffle(dep, partition.index)
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
    val recordsWritten: Long)
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val diskBytesSpilled: Long,
<SEP>
    val recordsRead: Long)
<SEP>
    val recordsWritten: Long)
<SEP>
    val resultSerializationTime: Long,
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
      getPreferredLocations(split)
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
    val executorCpuTime: Long,
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
    val localBytesRead: Long,
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
    f(context, split.index, firstParent[T].iterator(split, context))
<SEP>
    val bytesRead: Long,
<SEP>
    val executorDeserializeTime: Long,
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
<SEP>
    if (storageLevel != StorageLevel.NONE) {
<SEP>
    combineByKeyWithClassTag[V]((v: V) => v, func, func, partitioner)
<SEP>
    val bytesWritten: Long,
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
              existingMetrics.incRecordsRead(1)
               delegate.next()
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val jvmGcTime: Long,
<SEP>
    parent.map(_.getAllScopes).getOrElse(Seq.empty) ++ Seq(this)
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
    val id: Int,
<SEP>
<SEP>
    parent.map(_.getAllScopes).getOrElse(Seq.empty) ++ Seq(this)
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    val remoteBytesRead: Long,
<SEP>
