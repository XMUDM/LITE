    RDDOperationScope.withScope(sc, "checkpoint", allowNesting = false, ignoreParent = true) {
<SEP>
  override val partitioner = if (preservesPartitioning) firstParent[T].partitioner else None
<SEP>
  def flatMapValues[U](f: V => TraversableOnce[U]): RDD[(K, U)] = self.withScope {
<SEP>
    val aggregatePartition = (it: Iterator[T]) => it.aggregate(zeroValue)(cleanSeqOp, cleanCombOp)
<SEP>
      (hllTuple: (HyperLogLogPlus, HyperLogLogPlus), v: (Int, Int)) => {
<SEP>
  final def getNumPartitions: Int = partitions.length
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    if (_sc == null) {
       throw new SparkException(
         "This RDD lacks a SparkContext. It could happen in the following cases: \n(1) RDD " +
         "transformations and actions are NOT invoked by the driver, but inside of other " +
         "transformations; for example, rdd1.map(x => rdd2.values.count() * x) is invalid " +
         "because the values transformation and count action cannot be performed inside of the " +
         "rdd1.map transformation. For more information, see SPARK-5063.\n(2) When a Spark " +
         "Streaming job recovers from checkpoint, this exception will be hit if a reference to " +
         "an RDD not defined by the streaming job is used in DStream operations. For more " +
         "information, See SPARK-13758.")
     }
     _sc
<SEP>
    new PairRDDFunctions(rdd)
<SEP>
    val recordsRead: Long)
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val attemptId: Int,
<SEP>
  def flatMapValues[U](f: V => TraversableOnce[U]): RDD[(K, U)] = self.withScope {
<SEP>
  private[spark] val CHECKPOINT_ALL_MARKED_ANCESTORS =
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
    checkpointData.exists(_.isCheckpointed)
<SEP>
  @transient protected lazy val isBarrier_ : Boolean =
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
class JavaRDD[T](val rdd: RDD[T])(implicit val classTag: ClassTag[T])
<SEP>
    val recordsWritten: Long)
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
    dependencies.filter(!_.isInstanceOf[ShuffleDependency[_, _, _]]).exists(_.rdd.isBarrier())
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    preservesPartitioning: Boolean = false,
<SEP>
    val array = new Array[Partition](part.numPartitions)
     for (i <- 0 until array.length) {
       // Each CoGroupPartition will have a dependency per contributing RDD
       array(i) = new CoGroupPartition(i, rdds.zipWithIndex.map { case (rdd, j) =>
         // Assume each RDD contributed a single dependency, and get it
         dependencies(j) match {
           case s: ShuffleDependency[_, _, _] =>
             None
           case _ =>
             Some(new NarrowCoGroupSplitDep(rdd, i, rdd.partitions(i)))
         }
       }.toArray)
     }
     array
<SEP>
    val executorCpuTime: Long,
<SEP>
      : RDD[(K, (Iterable[V], Iterable[W]))] = self.withScope {
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
    dependencies.filter(!_.isInstanceOf[ShuffleDependency[_, _, _]]).exists(_.rdd.isBarrier())
<SEP>
  private[spark] implicit def toScalaFunction[T, R](fun: JFunction[T, R]): T => R = x => fun.call(x)
<SEP>
    val bytesRead: Long,
<SEP>
    @Since("0.8.0") product: Int,
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    val hostPort: String,
<SEP>
class PairRDDFunctions[K, V](self: RDD[(K, V)])
<SEP>
      if (!doCheckpointCalled) {
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
    val blockId = RDDBlockId(id, partition.index)
     var readCachedBlock = true
     // This method is called on executors, so we need call SparkEnv.get instead of sc.env.
     SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
    val bytesWritten: Long,
<SEP>
<SEP>
  def context: SparkContext = sc
<SEP>
class JavaPairRDD[K, V](val rdd: RDD[(K, V)])
<SEP>
    dependencies.head.rdd.asInstanceOf[RDD[U]]
<SEP>
    val scopeKey = SparkContext.RDD_SCOPE_KEY
     val noOverrideKey = SparkContext.RDD_SCOPE_NO_OVERRIDE_KEY
     val oldScopeJson = sc.getLocalProperty(scopeKey)
     val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
     val oldNoOverride = sc.getLocalProperty(noOverrideKey)
     try {
       if (ignoreParent) {
         // Ignore all parent settings and scopes and start afresh with our own root scope
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name).toJson)
       } else if (sc.getLocalProperty(noOverrideKey) == null) {
         // Otherwise, set the scope only if the higher level caller allows us to do so
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name, oldScope).toJson)
       }
       // Optionally disallow the child body to override our scope
       if (!allowNesting) {
         sc.setLocalProperty(noOverrideKey, "true")
       }
       body
     } finally {
       // Remember to restore any state that was modified before exiting
       sc.setLocalProperty(scopeKey, oldScopeJson)
       sc.setLocalProperty(noOverrideKey, oldNoOverride)
<SEP>
  private val stateLock = new Integer(0)
<SEP>
private[spark] abstract class AbstractJavaRDDLike[T, This <: JavaRDDLike[T, This]]
<SEP>
    rdds.map { rdd: RDD[_] =>
<SEP>
    val name: String,
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
  @transient var name: String = _
<SEP>
    implicit val ctagK: ClassTag[K] = fakeClassTag
     implicit val ctagV: ClassTag[V] = fakeClassTag
     new JavaPairRDD[K, V](rdd.rdd)
<SEP>
      : RDD[(K, (Iterable[V], Iterable[W]))] = self.withScope {
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    if (isCheckpointedAndMaterialized) {
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val executors: Seq[String])
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
    Option(sc.getLocalProperty(SparkContext.RDD_SCOPE_KEY)).map(RDDOperationScope.fromJson)
<SEP>
        hllTuple._1.offer(v._1)
         hllTuple._2.offer(v._2)
         hllTuple
<SEP>
trait JavaRDDLike[T, This <: JavaRDDLike[T, This]] extends Serializable {
<SEP>
      (h1: (HyperLogLogPlus, HyperLogLogPlus), h2: (HyperLogLogPlus, HyperLogLogPlus)) => {
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
      allowNesting: Boolean = false)(body: => T): T = {
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
      .map(_.getMethodName)
<SEP>
    this.cogroup(other, partitioner).flatMapValues( pair =>
<SEP>
  implicit def toRDD[K, V](rdd: JavaPairRDD[K, V]): RDD[(K, V)] = rdd.rdd
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    for (i <- 0 until array.length) {
<SEP>
  def values(): JavaRDD[V] = JavaRDD.fromRDD[V](rdd.map(_._2))
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
  def fromRDD(rdd: RDD[scala.Double]): JavaDoubleRDD = new JavaDoubleRDD(rdd)
<SEP>
    val resultSerializationTime: Long,
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
<SEP>
          dependencies.foreach(_.rdd.doCheckpoint())
<SEP>
      .dropWhile(_.getMethodName != ourMethodName)
<SEP>
  def sparkContext: SparkContext = sc
<SEP>
  def initialize(): Unit = inputBlock.get()
<SEP>
class CoGroupedRDD[K: ClassTag](
<SEP>
  def aggregate[U: ClassTag](zeroValue: U)(seqOp: (U, T) => U, combOp: (U, U) => U): U = withScope {
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  def nextScopeId(): Int = scopeCounter.getAndIncrement
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
    @Since("0.8.0") user: Int,
<SEP>
    val executorDeserializeTime: Long,
<SEP>
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
<SEP>
    jsonMapper.readValue(s, classOf[RDDOperationScope])
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
  def mapValues[U](f: V => U): RDD[(K, U)] = self.withScope {
<SEP>
    val id: String,
<SEP>
    SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
    val id: Int,
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
    isOrderSensitive: Boolean = false)
<SEP>
    val bytesWritten: Long,
<SEP>
                       (implicit val kClassTag: ClassTag[K], implicit val vClassTag: ClassTag[V])
<SEP>
    val resultSize: Long,
<SEP>
      if (rdd.partitioner == Some(part)) {
<SEP>
class JavaDoubleRDD(val srdd: RDD[scala.Double])
<SEP>
        h1._1.addAll(h2._1)
         h1._2.addAll(h2._2)
         h1
<SEP>
    val localBlocksFetched: Long,
<SEP>
    new DoubleRDDFunctions(rdd)
<SEP>
  implicit def fromRDD[T: ClassTag](rdd: RDD[T]): JavaRDD[T] = new JavaRDD[T](rdd)
<SEP>
      .find(_.getMethodName != ourMethodName)
<SEP>
    new JavaRDD(rdd.map(f)(fakeClassTag))(fakeClassTag)
<SEP>
  val id: Int = sc.newRddId()
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
    @transient var rdds: Seq[RDD[_ <: Product2[K, _]]],
<SEP>
    new JavaRDD(this)(elementClassTag)
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
    val writeTime: Long,
<SEP>
    val peakExecutionMemory: Long,
<SEP>
    isFromBarrier: Boolean = false,
<SEP>
  def fakeClassTag[T]: ClassTag[T] = ClassTag.AnyRef.asInstanceOf[ClassTag[T]]
<SEP>
    val stageId: Int,
<SEP>
  private[spark] def elementClassTag: ClassTag[T] = classTag[T]
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
            partitions_.zipWithIndex.foreach { case (partition, index) =>
<SEP>
    override val index: Int, val narrowDeps: Array[Option[NarrowCoGroupSplitDep]])
<SEP>
  private[spark] def withScope[U](body: => U): U = RDDOperationScope.withScope[U](sc)(body)
<SEP>
    val recordsRead: Long)
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
                       (implicit val kClassTag: ClassTag[K], implicit val vClassTag: ClassTag[V])
<SEP>
class DoubleRDDFunctions(self: RDD[Double]) extends Logging with Serializable {
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
      getPreferredLocations(split)
<SEP>
<SEP>
    rdds.map { rdd: RDD[_] =>
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
private[spark] class HadoopPartition(rddId: Int, override val index: Int, s: InputSplit)
<SEP>
    join(other, defaultPartitioner(self, other))
<SEP>
    new JavaPairRDD[K, V](rdd)
<SEP>
<SEP>
<SEP>
    if (storageLevel != StorageLevel.NONE) {
<SEP>
class JavaPairRDD[K, V](val rdd: RDD[(K, V)])
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
    (implicit kt: ClassTag[K], vt: ClassTag[V], ord: Ordering[K] = null): PairRDDFunctions[K, V] = {
<SEP>
      array(i) = new CoGroupPartition(i, rdds.zipWithIndex.map { case (rdd, j) =>
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
  override def getPartitions: Array[Partition] = firstParent[T].partitions
<SEP>
    val remoteBytesRead: Long,
<SEP>
  def unset(): Unit = inputBlock.remove()
<SEP>
    val executorRunTime: Long,
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
  def mapValues[U](f: V => U): RDD[(K, U)] = self.withScope {
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
  private var serializer: Serializer = SparkEnv.get.serializer
<SEP>
    @Since("0.8.0") val userFeatures: RDD[(Int, Array[Double])],
<SEP>
    val diskUsed: Long,
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    val mergeResult = (index: Int, taskResult: U) => jobResult = combOp(jobResult, taskResult)
<SEP>
    fromRDD(rdd.join(other))
<SEP>
    val aggregatePartition = (it: Iterator[T]) => it.aggregate(zeroValue)(cleanSeqOp, cleanCombOp)
<SEP>
    @Since("0.8.0") val productFeatures: RDD[(Int, Array[Double])])
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
  private[spark] implicit def toScalaFunction[T, R](fun: JFunction[T, R]): T => R = x => fun.call(x)
<SEP>
  private[spark] def keyClass: Class[_] = kt.runtimeClass
<SEP>
    val fetchWaitTime: Long,
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
      array(i) = new CoGroupPartition(i, rdds.zipWithIndex.map { case (rdd, j) =>
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
    new MapPartitionsRDD[U, T](this, (context, pid, iter) => iter.map(cleanF))
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    val memoryUsed: Long,
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
    val recordsWritten: Long)
<SEP>
    val diskBytesSpilled: Long,
<SEP>
    val aggregatePartition = (it: Iterator[T]) => it.aggregate(zeroValue)(cleanSeqOp, cleanCombOp)
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  def join[W](other: RDD[(K, W)]): RDD[(K, (V, W))] = self.withScope {
<SEP>
    new InheritableThreadLocal[AtomicReference[FileBlock]] {
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
    var jobResult = Utils.clone(zeroValue, sc.env.serializer.newInstance())
     val cleanSeqOp = sc.clean(seqOp)
     val cleanCombOp = sc.clean(combOp)
     val aggregatePartition = (it: Iterator[T]) => it.aggregate(zeroValue)(cleanSeqOp, cleanCombOp)
     val mergeResult = (index: Int, taskResult: U) => jobResult = combOp(jobResult, taskResult)
     sc.runJob(this, aggregatePartition, mergeResult)
     jobResult
<SEP>
    val ourMethodName = "withScope"
     val callerMethodName = Thread.currentThread.getStackTrace()
       .dropWhile(_.getMethodName != ourMethodName)
       .find(_.getMethodName != ourMethodName)
       .map(_.getMethodName)
       .getOrElse {
         // Log a warning just in case, but this should almost certainly never happen
         logWarning("No valid method name for this RDD operation scope!")
         "N/A"
       }
     withScope[T](sc, callerMethodName, allowNesting, ignoreParent = false)(body)
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    val localBytesRead: Long,
<SEP>
    f(context, split.index, firstParent[T].iterator(split, context))
<SEP>
    val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
<SEP>
      if (!doCheckpointCalled) {
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
    val (usersCount, productsCount) = countApproxDistinctUserProduct(usersProducts)
<SEP>
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
              existingMetrics.incRecordsRead(1)
               delegate.next()
<SEP>
  def join[W](other: RDD[(K, W)], partitioner: Partitioner): RDD[(K, (V, W))] = self.withScope {
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val jobId: Int,
<SEP>
<SEP>
    val jvmGcTime: Long,
<SEP>
<SEP>
  protected def getDependencies: Seq[Dependency[_]] = deps
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
