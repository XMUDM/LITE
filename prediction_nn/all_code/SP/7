    RDDOperationScope.withScope(sc, "checkpoint", allowNesting = false, ignoreParent = true) {
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
    partitionsRDD.preferredLocations(s)
<SEP>
  final def getNumPartitions: Int = partitions.length
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
private[graphx]
<SEP>

<SEP>
    if (_sc == null) {
       throw new SparkException(
         "This RDD lacks a SparkContext. It could happen in the following cases: \n(1) RDD " +
         "transformations and actions are NOT invoked by the driver, but inside of other " +
         "transformations; for example, rdd1.map(x => rdd2.values.count() * x) is invalid " +
         "because the values transformation and count action cannot be performed inside of the " +
         "rdd1.map transformation. For more information, see SPARK-5063.\n(2) When a Spark " +
         "Streaming job recovers from checkpoint, this exception will be hit if a reference to " +
         "an RDD not defined by the streaming job is used in DStream operations. For more " +
         "information, See SPARK-13758.")
     }
     _sc
<SEP>
    new PairRDDFunctions(rdd)
<SEP>
    partitionsRDD.map(_.size.toLong).fold(0)(_ + _)
<SEP>
    var f: (Iterator[A], Iterator[B]) => Iterator[V],
<SEP>
    val recordsRead: Long)
<SEP>
    val shuffleWriteMetrics: ShuffleWriteMetrics)
<SEP>
    val attemptId: Int,
<SEP>
  private[spark] val CHECKPOINT_ALL_MARKED_ANCESTORS =
<SEP>
    partitionValues = rdds.map(rdd => rdd.partitions(idx))
     oos.defaultWriteObject()
<SEP>
  (implicit override protected val vdTag: ClassTag[VD])
<SEP>
  implicit object ShippableVertexPartitionOpsConstructor
<SEP>
    val remoteBytesReadToDisk: Long,
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
    val parts = partitionsRDD.zipPartitions(shuffled, true) { (thisIter, msgIter) =>
<SEP>
    partitionsRDD.map(_.size.toLong).fold(0)(_ + _)
<SEP>
private[graphx] class ShippableVertexPartitionOps[VD: ClassTag](self: ShippableVertexPartition[VD])
<SEP>
    checkpointData.exists(_.isCheckpointed)
<SEP>
    val partitions = s.asInstanceOf[ZippedPartitionsPartition].partitions
     f(rdd1.iterator(partitions(0), context), rdd2.iterator(partitions(1), context))
<SEP>
    val memoryBytesSpilled: Long,
<SEP>
  @transient protected lazy val isBarrier_ : Boolean =
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
  val capacity: Int = index.capacity
<SEP>
    @transient private val rdds: Seq[RDD[_]],
<SEP>
    val recordsWritten: Long)
<SEP>
    dependencies.filter(!_.isInstanceOf[ShuffleDependency[_, _, _]]).exists(_.rdd.isBarrier())
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>

<SEP>
    val executorCpuTime: Long,
<SEP>
    partitionsRDD.map(_.size.toLong).fold(0)(_ + _)
<SEP>
    val spGraph = graph.mapVertices { (vid, attr) =>
       if (landmarks.contains(vid)) makeMap(vid -> 0) else makeMap()
     }
 
     val initialMessage = makeMap()
 
     def vertexProgram(id: VertexId, attr: SPMap, msg: SPMap): SPMap = {
       addMaps(attr, msg)
     }
 
     def sendMessage(edge: EdgeTriplet[SPMap, _]): Iterator[(VertexId, SPMap)] = {
       val newAttr = incrementMap(edge.dstAttr)
       if (edge.srcAttr != addMaps(newAttr, edge.srcAttr)) Iterator((edge.srcId, newAttr))
       else Iterator.empty
     }
 
     Pregel(spGraph, initialMessage)(vertexProgram, sendMessage, addMaps)
<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
    dependencies.filter(!_.isInstanceOf[ShuffleDependency[_, _, _]]).exists(_.rdd.isBarrier())
<SEP>
    val bytesRead: Long,
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    val hostPort: String,
<SEP>
class PairRDDFunctions[K, V](self: RDD[(K, V)])
<SEP>
      if (!doCheckpointCalled) {
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
    val blockId = RDDBlockId(id, partition.index)
     var readCachedBlock = true
     // This method is called on executors, so we need call SparkEnv.get instead of sc.env.
     SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
<SEP>
    val bytesWritten: Long,
<SEP>
  def context: SparkContext = sc
<SEP>
<SEP>
    dependencies.head.rdd.asInstanceOf[RDD[U]]
<SEP>
    val scopeKey = SparkContext.RDD_SCOPE_KEY
     val noOverrideKey = SparkContext.RDD_SCOPE_NO_OVERRIDE_KEY
     val oldScopeJson = sc.getLocalProperty(scopeKey)
     val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
     val oldNoOverride = sc.getLocalProperty(noOverrideKey)
     try {
       if (ignoreParent) {
         // Ignore all parent settings and scopes and start afresh with our own root scope
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name).toJson)
       } else if (sc.getLocalProperty(noOverrideKey) == null) {
         // Otherwise, set the scope only if the higher level caller allows us to do so
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name, oldScope).toJson)
       }
       // Optionally disallow the child body to override our scope
       if (!allowNesting) {
         sc.setLocalProperty(noOverrideKey, "true")
       }
       body
     } finally {
       // Remember to restore any state that was modified before exiting
       sc.setLocalProperty(scopeKey, oldScopeJson)
       sc.setLocalProperty(noOverrideKey, oldNoOverride)
<SEP>
  private val stateLock = new Integer(0)
<SEP>
    val name: String,
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
  @transient var name: String = _
<SEP>
    val routingTable: RoutingTablePartition)
<SEP>
      codec: Option[Class[_ <: CompressionCodec]] = None): Unit = self.withScope {
<SEP>
    if (isCheckpointedAndMaterialized) {
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    var rdd2: RDD[B],
<SEP>
    logInfo("Removing RDD " + id + " from persistence list")
     sc.unpersistRDD(id, blocking)
     storageLevel = StorageLevel.NONE
     this
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val executors: Seq[String])
<SEP>
    val outputMetrics: OutputMetrics,
<SEP>
  private[spark] def conf = sc.conf
<SEP>
    Option(sc.getLocalProperty(SparkContext.RDD_SCOPE_KEY)).map(RDDOperationScope.fromJson)
<SEP>
  override protected def unpersist(data: RDD[T]): Unit = data.unpersist(blocking = false)
<SEP>
    ("Memory Size" -> rddInfo.memSize) ~
<SEP>
  override protected def getPartitions: Array[Partition] = partitionsRDD.partitions
<SEP>
  private def writeObject(oos: ObjectOutputStream): Unit = Utils.tryOrIOException {
<SEP>
      allowNesting: Boolean = false)(body: => T): T = {
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
      .map(_.getMethodName)
<SEP>
    partitionsRDD.map(_.size.toLong).fold(0)(_ + _)
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
  override def getStorageLevel: StorageLevel = partitionsRDD.getStorageLevel
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
class VertexRDDImpl[VD] private[graphx] (
<SEP>
    val resultSerializationTime: Long,
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
          dependencies.foreach(_.rdd.doCheckpoint())
<SEP>
      .dropWhile(_.getMethodName != ourMethodName)
<SEP>
  def initialize(): Unit = inputBlock.get()
<SEP>
  def nextScopeId(): Int = scopeCounter.getAndIncrement
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
    val executorDeserializeTime: Long,
<SEP>
  var partitionValues = rdds.map(rdd => rdd.partitions(idx))
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val mask: BitSet,
<SEP>
    jsonMapper.readValue(s, classOf[RDDOperationScope])
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String,
<SEP>
    val id: Int,
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
    isOrderSensitive: Boolean = false)
<SEP>
    val bytesWritten: Long,
<SEP>
    val resultSize: Long,
<SEP>
    @transient val partitionsRDD: RDD[ShippableVertexPartition[VD]],
<SEP>
    var rdd1: RDD[A],
<SEP>
    @transient val vertices: VertexRDD[VD],
<SEP>
  override val index: Int = idx
<SEP>
    val localBlocksFetched: Long,
<SEP>
      .find(_.getMethodName != ourMethodName)
<SEP>
  val id: Int = sc.newRddId()
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
    ("Callsite" -> rddInfo.callSite) ~
<SEP>
    val writeTime: Long,
<SEP>
    val peakExecutionMemory: Long,
<SEP>
    isFromBarrier: Boolean = false,
<SEP>
private[graphx] class ShippableVertexPartitionOps[VD: ClassTag](self: ShippableVertexPartition[VD])
<SEP>
    val stageId: Int,
<SEP>
  private[spark] def elementClassTag: ClassTag[T] = classTag[T]
<SEP>
            partitions_.zipWithIndex.foreach { case (partition, index) =>
<SEP>
private[graphx] abstract class VertexPartitionBaseOps
<SEP>
  private[spark] def withScope[U](body: => U): U = RDDOperationScope.withScope[U](sc)(body)
<SEP>
    val recordsRead: Long)
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
  var partitionValues = rdds.map(rdd => rdd.partitions(idx))
<SEP>
      : VertexPartitionBaseOps[VD, ShippableVertexPartition] = shippablePartitionToOps(partition)
<SEP>
      getPreferredLocations(split)
<SEP>
    val index: VertexIdToIndexMap,
<SEP>
  def size: Int = mask.cardinality()
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
    val parts = partitionsRDD.zipPartitions(shuffled, true) { (thisIter, msgIter) =>
<SEP>
    partitionValues = rdds.map(rdd => rdd.partitions(idx))
<SEP>
    val foldPartition = (iter: Iterator[T]) => iter.fold(zeroValue)(cleanOp)
<SEP>
    if (storageLevel != StorageLevel.NONE) {
<SEP>
  def partitions: Seq[Partition] = partitionValues
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
    ("Number of Cached Partitions" -> rddInfo.numCachedPartitions) ~
<SEP>
    parent.map(_.getAllScopes).getOrElse(Seq.empty) ++ Seq(this)
<SEP>
  def fold(zeroValue: T)(op: (T, T) => T): T = withScope {
<SEP>
    parent.map(_.getAllScopes).getOrElse(Seq.empty) ++ Seq(this)
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
  override def getPartitions: Array[Partition] = firstParent[T].partitions
<SEP>
    val remoteBytesRead: Long,
<SEP>
  def unset(): Unit = inputBlock.remove()
<SEP>
    val jobID = new JobID(jobTrackerId, jobId)
     val taId = new TaskAttemptID(new TaskID(jobID, TaskType.MAP, splitId), attemptId)
 
     conf.set("mapreduce.task.id", taId.getTaskID.toString)
     conf.set("mapreduce.task.attempt.id", taId.toString)
     conf.setBoolean("mapreduce.task.ismap", true)
     conf.setInt("mapreduce.task.partition", splitId)
     conf.set("mapreduce.job.id", jobID.toString)
<SEP>
    val mergeResult = (index: Int, taskResult: T) => jobResult = op(jobResult, taskResult)
<SEP>
    val executorRunTime: Long,
<SEP>
    val inputMetrics: InputMetrics,
<SEP>
    ("Number of Partitions" -> rddInfo.numPartitions) ~
<SEP>
  private[spark] def valueClass: Class[_] = vt.runtimeClass
<SEP>
  override val index: Int = idx
<SEP>
    require(maxIterations > 0, s"Maximum number of iterations must be greater than 0," +
       s" but got ${maxIterations}")
 
     val checkpointInterval = graph.vertices.sparkContext.getConf
       .getInt("spark.graphx.pregel.checkpointInterval", -1)
     var g = graph.mapVertices((vid, vdata) => vprog(vid, vdata, initialMsg))
     val graphCheckpointer = new PeriodicGraphCheckpointer[VD, ED](
       checkpointInterval, graph.vertices.sparkContext)
     graphCheckpointer.update(g)
 
     // compute the messages
     var messages = GraphXUtils.mapReduceTriplets(g, sendMsg, mergeMsg)
     val messageCheckpointer = new PeriodicRDDCheckpointer[(VertexId, A)](
       checkpointInterval, graph.vertices.sparkContext)
     messageCheckpointer.update(messages.asInstanceOf[RDD[(VertexId, A)]])
     var activeMessages = messages.count()
 
     // Loop
     var prevG: Graph[VD, ED] = null
     var i = 0
     while (activeMessages > 0 && i < maxIterations) {
       // Receive the messages and update the vertices.
       prevG = g
       g = g.joinVertices(messages)(vprog)
       graphCheckpointer.update(g)
 
       val oldMessages = messages
       // Send new messages, skipping edges where neither side received a message. We must cache
       // messages so it can be materialized on the next line, allowing us to uncache the previous
       // iteration.
       messages = GraphXUtils.mapReduceTriplets(
         g, sendMsg, mergeMsg, Some((oldMessages, activeDirection)))
       // The call to count() materializes `messages` and the vertices of `g`. This hides oldMessages
       // (depended on by the vertices of g) and the vertices of prevG (depended on by oldMessages
       // and the vertices of g).
       messageCheckpointer.update(messages.asInstanceOf[RDD[(VertexId, A)]])
       activeMessages = messages.count()
 
       logInfo("Pregel finished iteration " + i)
 
       // Unpersist the RDDs hidden by newly-materialized RDDs
       oldMessages.unpersist(blocking = false)
       prevG.unpersistVertices(blocking = false)
       prevG.edges.unpersist(blocking = false)
       // count the iteration
       i += 1
     }
     messageCheckpointer.unpersistDataSet()
     graphCheckpointer.deleteAllCheckpoints()
     messageCheckpointer.deleteAllCheckpoints()
     g
<SEP>
    val diskUsed: Long,
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    val executorDeserializeCpuTime: Long,
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
  private[spark] def keyClass: Class[_] = kt.runtimeClass
<SEP>
    val fetchWaitTime: Long,
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
      conf: JobConf = new JobConf(self.context.hadoopConfiguration),
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
    new MapPartitionsRDD[U, T](this, (context, pid, iter) => iter.map(cleanF))
<SEP>
    val shuffleReadMetrics: ShuffleReadMetrics,
<SEP>
    val memoryUsed: Long,
<SEP>
    var jobResult = Utils.clone(zeroValue, sc.env.closureSerializer.newInstance())
     val cleanOp = sc.clean(op)
     val foldPartition = (iter: Iterator[T]) => iter.fold(zeroValue)(cleanOp)
     val mergeResult = (index: Int, taskResult: T) => jobResult = op(jobResult, taskResult)
     sc.runJob(this, foldPartition, mergeResult)
     jobResult
<SEP>
    val remoteBlocksFetched: Long,
<SEP>
    val recordsWritten: Long)
<SEP>
    val diskBytesSpilled: Long,
<SEP>
      preservesPartitioning: Boolean = false): RDD[U] = withScope {
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
      thisIter.map(_.aggregateUsingIndex(msgIter, reduceFunc))
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
private[spark] class PeriodicRDDCheckpointer[T](
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
    val ourMethodName = "withScope"
     val callerMethodName = Thread.currentThread.getStackTrace()
       .dropWhile(_.getMethodName != ourMethodName)
       .find(_.getMethodName != ourMethodName)
       .map(_.getMethodName)
       .getOrElse {
         // Log a warning just in case, but this should almost certainly never happen
         logWarning("No valid method name for this RDD operation scope!")
         "N/A"
       }
     withScope[T](sc, callerMethodName, allowNesting, ignoreParent = false)(body)
<SEP>
    ("Disk Size" -> rddInfo.diskSize)
<SEP>
    val localBytesRead: Long,
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
    f(context, split.index, firstParent[T].iterator(split, context))
<SEP>
    val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
<SEP>
      if (!doCheckpointCalled) {
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
  @transient private var doCheckpointCalled = false
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
              existingMetrics.incRecordsRead(1)
               delegate.next()
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val jobId: Int,
<SEP>
    val jvmGcTime: Long,
<SEP>
    : ShippableVertexPartitionOps[VD] = new ShippableVertexPartitionOps(partition)
<SEP>
  protected def getDependencies: Seq[Dependency[_]] = deps
<SEP>
    val dep = dependencies.head.asInstanceOf[ShuffleDependency[K, V, C]]
     SparkEnv.get.shuffleManager.getReader(dep.shuffleHandle, split.index, split.index + 1, context)
       .read()
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
    val values: Array[VD],
<SEP>
