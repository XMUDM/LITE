class GradientDescent private[spark] (private var gradient: Gradient, private var updater: Updater)
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    id: String,
<SEP>
    if (_sc == null) {
       throw new SparkException(
         "This RDD lacks a SparkContext. It could happen in the following cases: \n(1) RDD " +
         "transformations and actions are NOT invoked by the driver, but inside of other " +
         "transformations; for example, rdd1.map(x => rdd2.values.count() * x) is invalid " +
         "because the values transformation and count action cannot be performed inside of the " +
         "rdd1.map transformation. For more information, see SPARK-5063.\n(2) When a Spark " +
         "Streaming job recovers from checkpoint, this exception will be hit if a reference to " +
         "an RDD not defined by the streaming job is used in DStream operations. For more " +
         "information, See SPARK-13758.")
     }
     _sc
<SEP>
  implicit def fromRDD[T: ClassTag](rdd: RDD[T]): JavaRDD[T] = new JavaRDD[T](rdd)
<SEP>
  protected val jobConfCacheKey: String = "rdd_%d_job_conf".format(id)
<SEP>
      .find(_.getMethodName != ourMethodName)
<SEP>
    new JavaRDD(rdd.map(f)(fakeClassTag))(fakeClassTag)
<SEP>
  val id: Int = sc.newRddId()
<SEP>
            HadoopRDD.CONFIGURATION_INSTANTIATION_LOCK.synchronized {
<SEP>
  @transient private[spark] val scope: Option[RDDOperationScope] = {
<SEP>
  def persist(): this.type = persist(StorageLevel.MEMORY_ONLY)
<SEP>
    isFromBarrier: Boolean = false,
<SEP>
  def fakeClassTag[T]: ClassTag[T] = ClassTag.AnyRef.asInstanceOf[ClassTag[T]]
<SEP>
  private[spark] val CHECKPOINT_ALL_MARKED_ANCESTORS =
<SEP>
  private[spark] def elementClassTag: ClassTag[T] = classTag[T]
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    val ancestors = new mutable.HashSet[RDD[_]]
 
     def visit(rdd: RDD[_]): Unit = {
       val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
         ancestors.add(parent)
         visit(parent)
       }
     }
 
     visit(this)
 
     // In case there is a cycle, do not include the root itself
     ancestors.filterNot(_ == this).toSeq
<SEP>
    Option(infos).map(_.flatMap { loc =>
<SEP>
            partitions_.zipWithIndex.foreach { case (partition, index) =>
<SEP>
  @transient protected lazy val isBarrier_ : Boolean =
<SEP>
  private[spark] def withScope[U](body: => U): U = RDDOperationScope.withScope[U](sc)(body)
<SEP>
class JavaSparkContext(val sc: SparkContext)
<SEP>
      sc.cleaner.foreach(_.registerRDDForCleanup(this))
<SEP>
class JavaRDD[T](val rdd: RDD[T])(implicit val classTag: ClassTag[T])
<SEP>
  val inputSplit = new SerializableWritable[InputSplit](s)
<SEP>
      narrowParentsNotVisited.foreach { parent =>
<SEP>
    Option(infos).map(_.flatMap { loc =>
<SEP>
  @transient private[spark] val creationSite = sc.getCallSite()
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
      val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
<SEP>
      getPreferredLocations(split)
<SEP>
case class ApplicationInfo private[spark](
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
    preservesPartitioning: Boolean = false,
<SEP>

<SEP>
    RDDOperationScope.jsonMapper.writeValueAsString(this)
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
       val narrowParents = narrowDependencies.map(_.rdd)
       val narrowParentsNotVisited = narrowParents.filterNot(ancestors.contains)
       narrowParentsNotVisited.foreach { parent =>
<SEP>
private[spark] class HadoopPartition(rddId: Int, override val index: Int, s: InputSplit)
<SEP>
  private[spark] def isBarrier(): Boolean = isBarrier_
<SEP>
  protected def getPreferredLocations(split: Partition): Seq[String] = Nil
<SEP>
    val hostPort: String,
<SEP>
private[spark] object RDDOperationScope extends Logging {
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
  def context: SparkContext = sc
<SEP>
class JavaPairRDD[K, V](val rdd: RDD[(K, V)])
<SEP>
    require(regParam >= 0,
       s"Regularization parameter must be nonnegative but got ${regParam}")
     this.regParam = regParam
     this
<SEP>
    val sparkProperties: Seq[(String, String)],
<SEP>
    dependencies.head.rdd.asInstanceOf[RDD[U]]
<SEP>
    val scopeKey = SparkContext.RDD_SCOPE_KEY
     val noOverrideKey = SparkContext.RDD_SCOPE_NO_OVERRIDE_KEY
     val oldScopeJson = sc.getLocalProperty(scopeKey)
     val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
     val oldNoOverride = sc.getLocalProperty(noOverrideKey)
     try {
       if (ignoreParent) {
         // Ignore all parent settings and scopes and start afresh with our own root scope
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name).toJson)
       } else if (sc.getLocalProperty(noOverrideKey) == null) {
         // Otherwise, set the scope only if the higher level caller allows us to do so
         sc.setLocalProperty(scopeKey, new RDDOperationScope(name, oldScope).toJson)
       }
       // Optionally disallow the child body to override our scope
       if (!allowNesting) {
         sc.setLocalProperty(noOverrideKey, "true")
       }
       body
     } finally {
       // Remember to restore any state that was modified before exiting
       sc.setLocalProperty(scopeKey, oldScopeJson)
       sc.setLocalProperty(noOverrideKey, oldNoOverride)
<SEP>
    if (isLocallyCheckpointed) {
<SEP>
  private val stateLock = new Integer(0)
<SEP>
  override def getPartitions: Array[Partition] = firstParent[T].partitions
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
private[spark] abstract class AbstractJavaRDDLike[T, This <: JavaRDDLike[T, This]]
<SEP>
    contextHandler.setAttribute(attribute, uiRoot)
<SEP>
  def textFile(path: String): JavaRDD[String] = sc.textFile(path)
<SEP>
    require(fraction > 0 && fraction <= 1.0,
       s"Fraction for mini-batch SGD must be in range (0, 1] but got ${fraction}")
     this.miniBatchFraction = fraction
     this
<SEP>
              initLocalJobConfFuncOpt.foreach(f => f(newJobConf))
<SEP>
    val name: String,
<SEP>
private[spark] object HadoopRDD extends Logging {
<SEP>
      val narrowParents = narrowDependencies.map(_.rdd)
<SEP>
    val jerseyContext = new ServletContextHandler(ServletContextHandler.NO_SESSIONS)
     jerseyContext.setContextPath("/api")
     val holder: ServletHolder = new ServletHolder(classOf[ServletContainer])
     holder.setInitParameter(ServerProperties.PROVIDER_PACKAGES, "org.apache.spark.status.api.v1")
     UIRootFromServletContext.setUiRoot(jerseyContext, uiRoot)
     jerseyContext.addServlet(holder, "/*")
     jerseyContext
<SEP>
  @transient var name: String = _
<SEP>
  protected var numFeatures: Int = -1
<SEP>
   *
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
    val jobConf = getJobConf()
     // add the credentials here as this can be called before SparkContext initialized
     SparkHadoopUtil.get.addCredentials(jobConf)
     try {
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
        array(i) = new HadoopPartition(id, i, inputSplits(i))
<SEP>
  def map[U: ClassTag](f: T => U): RDD[U] = withScope {
<SEP>
  private[spark] def conf = sc.conf
<SEP>
  @volatile @transient private var partitions_ : Array[Partition] = _
<SEP>
    Option(sc.getLocalProperty(SparkContext.RDD_SCOPE_KEY)).map(RDDOperationScope.fromJson)
<SEP>
trait JavaRDDLike[T, This <: JavaRDDLike[T, This]] extends Serializable {
<SEP>
    checkpointData match {
<SEP>
  val CONFIGURATION_INSTANTIATION_LOCK = new Object()
<SEP>
      allowNesting: Boolean = false)(body: => T): T = {
<SEP>
    checkpointRDD.map(_.getPreferredLocations(split)).getOrElse {
<SEP>
    checkpointRDD.map(r => List(new OneToOneDependency(r))).getOrElse {
<SEP>
      .map(_.getMethodName)
<SEP>
abstract class GeneralizedLinearAlgorithm[M <: GeneralizedLinearModel]
<SEP>
  private[spark] implicit def toScalaFunction[T, R](fun: JFunction[T, R]): T => R = x => fun.call(x)
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    isFromBarrier || dependencies.exists(_.rdd.isBarrier())
<SEP>
    val conf: Configuration = broadcastedConf.value.value
     if (shouldCloneJobConf) {
       // Hadoop Configuration objects are not thread-safe, which may lead to various problems if
       // one job modifies a configuration while another reads it (SPARK-2546).  This problem occurs
       // somewhat rarely because most jobs treat the configuration as though it's immutable.  One
       // solution, implemented here, is to clone the Configuration object.  Unfortunately, this
       // clone can be very expensive.  To avoid unexpected performance regressions for workloads and
       // Hadoop versions that do not suffer from these thread-safety issues, this cloning is
       // disabled by default.
       HadoopRDD.CONFIGURATION_INSTANTIATION_LOCK.synchronized {
<SEP>
  @volatile private var dependencies_ : Seq[Dependency[_]] = _
<SEP>
<SEP>
    ("RDD ID" -> rddInfo.id) ~
<SEP>
    require(step > 0,
       s"Initial step size must be positive but got ${step}")
     this.stepSize = step
     this
<SEP>
    require(iters >= 0,
       s"Number of iterations must be nonnegative but got ${iters}")
     this.numIterations = iters
     this
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
  def getStorageLevel: StorageLevel = storageLevel
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
      .dropWhile(_.getMethodName != ourMethodName)
<SEP>
      val narrowDependencies = rdd.dependencies.filter(_.isInstanceOf[NarrowDependency[_]])
<SEP>
  def cache(): this.type = persist()
<SEP>
  @transient var name: String = _
<SEP>
  private val jsonMapper = new ObjectMapper().registerModule(DefaultScalaModule)
<SEP>
  def sparkContext: SparkContext = sc
<SEP>
    val ourMethodName = "withScope"
     val callerMethodName = Thread.currentThread.getStackTrace()
       .dropWhile(_.getMethodName != ourMethodName)
       .find(_.getMethodName != ourMethodName)
       .map(_.getMethodName)
       .getOrElse {
         // Log a warning just in case, but this should almost certainly never happen
         logWarning("No valid method name for this RDD operation scope!")
         "N/A"
       }
     withScope[T](sc, callerMethodName, allowNesting, ignoreParent = false)(body)
<SEP>
    SparkEnv.get.hadoopJobMetadata.put(key, value)
<SEP>
    val hsplit = split.asInstanceOf[HadoopPartition].inputSplit.value
     val locs = hsplit match {
       case lsplit: InputSplitWithLocationInfo =>
         HadoopRDD.convertSplitLocationInfo(lsplit.getLocationInfo)
       case _ => None
     }
     locs.getOrElse(hsplit.getLocations.filter(_ != "localhost"))
<SEP>
  def nextScopeId(): Int = scopeCounter.getAndIncrement
<SEP>
    ("Scope" -> rddInfo.scope.map(_.toJson)) ~
<SEP>
  private[spark] var checkpointData: Option[RDDCheckpointData[T]] = None
<SEP>
  def getCachedMetadata(key: String): Any = SparkEnv.get.hadoopJobMetadata.get(key)
<SEP>
    val newInputFormat = ReflectionUtils.newInstance(inputFormatClass.asInstanceOf[Class[_]], conf)
       .asInstanceOf[InputFormat[K, V]]
     newInputFormat match {
       case c: Configurable => c.setConf(conf)
       case _ =>
     }
     newInputFormat
<SEP>
    val oldScope = Option(oldScopeJson).map(RDDOperationScope.fromJson)
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    ancestors.filterNot(_ == this).toSeq
<SEP>
    jsonMapper.readValue(s, classOf[RDDOperationScope])
<SEP>
    name = _name
     this
<SEP>
    Option(infos).map(_.flatMap { loc =>
<SEP>
    val parent: Option[RDDOperationScope] = None,
<SEP>
abstract class RDD[T: ClassTag](
<SEP>
    checkpointRDD.map(_.partitions).getOrElse {
<SEP>
    val id: String,
<SEP>
    val jobId: Int,
<SEP>
case class ApplicationAttemptInfo private[spark](
<SEP>
        ancestors.add(parent)
         visit(parent)
<SEP>
    isOrderSensitive: Boolean = false)
<SEP>
  protected def getDependencies: Seq[Dependency[_]] = deps
<SEP>
    val id: String = RDDOperationScope.nextScopeId().toString) {
<SEP>
  implicit def toRDD[T](rdd: JavaRDD[T]): RDD[T] = rdd.rdd
<SEP>
